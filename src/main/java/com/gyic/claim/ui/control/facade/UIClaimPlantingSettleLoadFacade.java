/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gyic.claim.ui.control.facade;

import  jxl.*;

import java.io.*;

import  jxl.read.biff.BiffException;
import org.apache.struts.upload.FormFile;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.math.BigDecimal;

import javax.servlet.http.HttpServletRequest;
import org.apache.struts.action.Action;


import com.gyic.claim.bl.action.domain.BLPlantingsettlelisttempAction;
import com.gyic.claim.bl.facade.BLHerdpolicylistFacade;
import com.gyic.claim.bl.facade.BLPlantingpolicylistFacade;
import com.gyic.claim.bl.facade.BLPlantingsettlelistFacade;
import com.gyic.claim.bl.facade.BLPlantingsettlelisttempFacade;
import com.gyic.claim.bl.facade.BLSettlemainlistFacade;
import com.gyic.claim.dto.domain.HerdpolicylistDto;
import com.gyic.claim.dto.domain.PlantingpolicylistDto;
import com.gyic.claim.dto.domain.PlantingsettlelistDto;
import com.gyic.claim.dto.domain.PlantingsettlelisttempDto;
import com.gyic.claim.dto.domain.SettlemainlistDto;
import com.gyic.claim.utils.LoadForm;
import com.gyic.claim.utils.PlantingSettleExport;
import com.gyic.claim.utils.Utils;
import com.sinosoft.claim.bl.facade.BLPrpLclaimFacade;
import com.sinosoft.claim.bl.facade.BLPrpLcompensateFacade;
import com.sinosoft.claim.bl.facade.BLPrpLregistFacade;
import com.sinosoft.claim.dto.custom.UserDto;
import com.sinosoft.claim.dto.domain.PrpLclaimDto;
import com.sinosoft.claim.dto.domain.PrpLcompensateDto;
import com.sinosoft.claim.dto.domain.PrpLregistDto;
import com.sinosoft.claim.ui.control.action.UIConfigAction;
import com.sinosoft.claim.ui.control.viewHelper.EndorseViewHelper;
import com.sinosoft.prpall.blsvr.cb.BLPrpCitemKind;
import com.sinosoft.prpall.blsvr.cb.BLPrpCmain;
import com.sinosoft.prpall.blsvr.lp.BLPrpLcompensate;
import com.sinosoft.prpall.schema.PrpCitemKindSchema;
import com.sinosoft.prpall.schema.PrpCmainSchema;
import com.sinosoft.sysframework.common.datatype.DateTime;
import com.sinosoft.sysframework.reference.DBManager;
import com.sinosoft.utiall.blsvr.BLPrpDkind;
import com.sinosoft.utility.error.UserException;

/** 
 * MyEclipse Struts
 * Creation date: 10-23-2009
 * 
 * XDoclet definition:
 * @struts.action path="/loadAction" name="loadForm" scope="request" validate="true"
 * @struts.action-forward name="importBasicInfo" path="/importBasicInfo.jsp"
 */

public class UIClaimPlantingSettleLoadFacade extends Action {

	static double topLimitOfGrownSeason = 1.00;
	static double lowerLimitOfGrownSeason = 0;
	static double lowerLimitOfSettleArea = 0.1;
	static double topLimitOfTotalLoss = 100;
	static double topLimitOfClaimRate = 1.00;
	static double lowerLimitOfClaimRate = 0;
	 Utils utils=new Utils();
	public String plantingLoadAct(HttpServletRequest request,String rootPath,LoadForm loadForm)
		throws Exception {
		try {
			request.setAttribute("loadXLS", "loadXLS");
	    	request.setAttribute("insureListCode", request.getParameter("insureListCode"));
	    	request.setAttribute("settleListCode", request.getParameter("settleListCode"));
	    	request.setAttribute("policyNo", request.getParameter("policyNo"));
	    	request.setAttribute("nodeType", request.getParameter("nodeType"));
	    	request.setAttribute("registNo", request.getParameter("registNo"));
	    	request.setAttribute("claimNo", request.getParameter("claimNo"));
	    	request.setAttribute("riskCode", request.getParameter("riskCode"));
	    	request.setAttribute("classCode", request.getParameter("classCode"));
	    	request.setAttribute("registNo", request.getParameter("registNo"));
	    	request.setAttribute("editType", request.getParameter("editType"));
	    	request.setAttribute("compensateNo", request.getParameter("compensateNo"));
	    	request.setAttribute("timeStamp", request.getParameter("timeStamp"));
            utils.getPhisicaMemory("校验理赔清单并保存临时表开始-----start");
			Boolean bRes=loadSettleInfo(request,rootPath,loadForm);
			utils.getPhisicaMemory("校验理赔清单并保存临时表结束-----end");
			if (bRes){
				request.setAttribute("opType", "loadXLS");
				return ("success");
			}else{
				return ("message");
			}
		}catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
	}



	private Boolean loadSettleInfo(HttpServletRequest request,String rootPath, LoadForm loadForm){
		try{
			String riskCode = request.getParameter("riskCode");
			List<String> strTitleList = PlantingSettleExport.getTitleListByRisk(riskCode);
			Map excelMap;
			if(null != strTitleList && strTitleList.size()>1){
				excelMap=loadExcelDataByNewTemplate(request,rootPath,loadForm);
			}else
				excelMap=loadExcelData(request,rootPath,loadForm);
			
			if ((excelMap==null) || (excelMap.size()==0))
				return false;
			
			StringBuffer errorMessage = (StringBuffer)excelMap.get("errorMessage");
			if(null!=errorMessage && !"".equals(errorMessage.toString())){
				request.setAttribute("errorMessage", errorMessage);
				return false;
			}
			else{
				List plantingSettleList = (List)excelMap.get("plantingSettleListDtoList");
				String registNo = request.getParameter("registNo");
				String timeStamp = request.getParameter("timeStamp");
				if(null!=registNo && !"".equals(registNo)){
					deletePrevousTempData(registNo,timeStamp);//在保存之前先清空当前报案的临时表数据。
					boolean saveResult = saveToTempTable(plantingSettleList,registNo,request);//将数据保存到临时表中,并将时间戳放到request中。
					if(!saveResult){
						request.setAttribute("errorMessage", "暂存理赔清单失败！！");
						return false;
					}
				}
			}			
		}catch (Exception e){
			e.printStackTrace();
			return false;
		}	
		return true;
	}

	private Map loadExcelData(HttpServletRequest request,String rootPath,LoadForm loadForm){
		try{
			Map saveMap=null;
				
			InputStream in=null;
			String savePath=rootPath;
			FormFile formFile = loadForm.getFormFile();
			String fileName=savePath+"\\"+formFile.getFileName();
				
			in =formFile.getInputStream();
			saveMap = checkAndLoadSettleExcel(request,in);
			in.close();
			return saveMap;
		}catch (Exception e){
			System.out.println(e);
			return null;
		}
	}

	private Map checkAndLoadSettleExcel(HttpServletRequest request, InputStream in){
		Workbook workbook=null;
		/**
		 * resultMap 包含两个参数： List plantingSettleListDtoList 理赔清单子表信息。
		 * 						 StringBuffer errorMessage 出错信息，用于页面显示。
		 */
		Map resultMap = new HashMap();
		String settleListCode = request.getParameter("settleListCode");
		String insureListCode = request.getParameter("insureListCode");
		String policyNo = request.getParameter("policyNo");
		String nodeType = request.getParameter("nodeType");
		String registNo = request.getParameter("registNo");
		String riskCode = request.getParameter("riskCode");
		String classCode = request.getParameter("classCode");
		String compensateNo = request.getParameter("compensateNo");

		double lowerLimitOfPartialLoss = 0.0;
		try{
			workbook=Workbook.getWorkbook(in);
			Sheet sheet=workbook.getSheet(0);
			
			boolean isReopen = isReopenCase(registNo, policyNo,nodeType,compensateNo);
			List reopenSettleCodeList = new ArrayList();
			if(isReopen)
				reopenSettleCodeList = getAllReopenSettleCodeList(registNo, policyNo,compensateNo);
			List plantingSettleListDtoList = new ArrayList();
			List plantingSettleListTotalDtoList = new ArrayList();
			List reopenFcodeList = new ArrayList();
			StringBuffer errorMessage = new StringBuffer();
			
			String sqlCondition = "";
			PlantingsettlelistDto plantingSettleListDto = new PlantingsettlelistDto();
			PlantingsettlelistDto plantingSettleListTotalDto = new PlantingsettlelistDto();
			BLPlantingpolicylistFacade blPlantingPolicyListFacade = new BLPlantingpolicylistFacade();
			Collection collectionPlantingPolicyList = new ArrayList();
			Map kindCodeMap = new HashMap();
			Map claimRateMap = new HashMap();
			String enterSymbol = "<br/>";
			
			if ( null==riskCode || "".equals(riskCode)){
				errorMessage.append("险种 "+riskCode +"为空！"+enterSymbol);
				resultMap.put("errorMessage", errorMessage);
				return resultMap;
			}
			
			//将第一个农户(第六行)的kindCode作为整张单子的默认kindCode,查询保单中的。
			String kindCode = sheet.getCell(8, 5).getContents().trim();
			if(null == kindCode || "".equals(kindCode)){
				errorMessage.append("第一行农户的险别信息错误！！"+enterSymbol);
				resultMap.put("errorMessage", errorMessage);
				return resultMap;
			}
			
			PrpCitemKindSchema prpCitemKindSchema = getPrpCitemKindSchema(policyNo, riskCode, kindCode);
			if(null==prpCitemKindSchema){
				errorMessage.append("没有找到保单为"+policyNo+"，险种为"+riskCode+"，险别为"+kindCode+"的标的子险信息。"+enterSymbol);
				resultMap.put("errorMessage", errorMessage);
				return resultMap;
			}
			String strDamageDate = getDamageDateByRegistNo(registNo);
			String strDamageHour = getDamageHourByRegistNo(registNo);
//			lowerLimitOfPartialLoss = 30;
			lowerLimitOfPartialLoss = getLowerLimitOfPartialLoss(riskCode);
			UserDto user = (UserDto)request.getSession().getAttribute("user");
			String opCode = user.getUserCode();
			DateTime dateTime = new DateTime(DateTime.current().toString(),DateTime.YEAR_TO_SECOND);
			if(0!=transformStringToDouble(prpCitemKindSchema.getTriggerPoint()))
				lowerLimitOfPartialLoss = transformStringToDouble(prpCitemKindSchema.getTriggerPoint());
			if("".equals(errorMessage.toString())){//进行Excel解析。
				for (int i = 5; i < sheet.getRows(); i++){//第6行开始读入
					plantingSettleListDto = new PlantingsettlelistDto();
					
					String fCode = sheet.getCell(1, i).getContents().trim();
					int j=5;
					String fPhone = sheet.getCell(j, i).getContents().trim();
					j++;
					String strfInsuredArea = sheet.getCell(j, i).getContents().trim();
					j++;
					String strfSumInsured = sheet.getCell(j, i).getContents().trim();
					j++;
					String fKindCode = sheet.getCell(j, i).getContents().trim();
					j+=2;
					String strfClaimRate = sheet.getCell(j, i).getContents().trim();
					j++;
//					String strfGrowingSeason = sheet.getCell(j, i).getContents().trim();
//					j++;
					String strfSettleArea = sheet.getCell(j, i).getContents().trim();
					j++;
					String strfLostRate = sheet.getCell(j, i).getContents().trim();
					j +=2;
					String fRemark = sheet.getCell(j, i).getContents().trim();
					
					String coln = sheet.getCell(0, i).getContents().trim();
					if (("总计：").equals(coln) || ("总计").equals(coln) || ("合计：").equals(coln) || ("合计").equals(coln))
						continue;
					
					if ((("总计").equals(fCode)) || (("总计：").equals(fCode)) || (("农户代码").equals(fCode))|| ("合计：").equals(fCode) || ("合计").equals(fCode))
						continue;
					
					if (("").equals(fCode))
						continue;
					
					if ( null==fKindCode || "".equals(fKindCode)){
						errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的险别 "+fKindCode +"为空！"+enterSymbol);
						continue;
					}
					
					if(null == strfClaimRate || "".equals(strfClaimRate)){
						errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的赔付比例为空！"+enterSymbol);
						continue;
					}
					
//					if(null == strfGrowingSeason || "".equals(strfGrowingSeason)){
//						errorMessage += "第"+(i+1)+"行，农户"+fCode+"的生长期比例为空！"+enterSymbol;
//						continue;
//					}			
					
					if(null == strfSettleArea || "".equals(strfSettleArea)){
						errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的受损面积为空！"+enterSymbol);
						continue;
					}
					
					if(null == strfLostRate || "".equals(strfLostRate)){
						errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的损失率为空！"+enterSymbol);
						continue;
					}
		
					sqlCondition = " fcode like '"+fCode+"' and riskCode like '"+riskCode+"' and kindCode like '"+fKindCode+"' and inusreListCode like '"+insureListCode+"' and validity like '1' ";
					collectionPlantingPolicyList = blPlantingPolicyListFacade.findByConditions(sqlCondition);
					if(null==collectionPlantingPolicyList || collectionPlantingPolicyList.size()!=1){
						errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的险种 "+riskCode+" 或险别 "+fKindCode +" 在保单清单中对应的记录为空或者不唯一！"+enterSymbol);
					}else{
						PlantingpolicylistDto plantingPolicyListDto = (PlantingpolicylistDto)(collectionPlantingPolicyList.toArray()[0]);
						//从保单清单带入农户基本信息
						plantingSettleListDto = getBasicInfoFromPolicyList(plantingSettleListDto,plantingPolicyListDto,request);
						
						boolean newTotalDto = false;
						plantingSettleListDto.setFcode(fCode);
						plantingSettleListDto.setRiskcode(riskCode);
						plantingSettleListDto.setKindcode(fKindCode);
						plantingSettleListDto.setOpcode(opCode);
						plantingSettleListDto.setOptime(dateTime);
						kindCodeMap.put(fKindCode, fKindCode);
						
						plantingSettleListTotalDto = getDtoFromPlantingSettleListTotalDtoList(plantingSettleListTotalDtoList, plantingSettleListDto);
						if(null==plantingSettleListTotalDto.getFcode()||"".equals(plantingSettleListTotalDto.getFcode())){
							plantingSettleListTotalDto.setFcode(fCode);
							plantingSettleListTotalDto.setRiskcode(riskCode);
							plantingSettleListTotalDto.setKindcode(fKindCode);
							newTotalDto = true;
						}
						//理赔面积不得小于规定最小亩数
						double settleArea = transformStringToDouble(strfSettleArea);
						settleArea = PlantingSettleExport.round(settleArea, 3);
						if(isReopen){
							if(Math.abs(settleArea)<lowerLimitOfSettleArea){
								errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的理赔面积小于"+lowerLimitOfSettleArea+"亩"+enterSymbol);
								continue;
							}
						}else{
							//贵州种植险放开0.1亩理赔限制 2019.1.29
							if("52".equals(policyNo.substring(5,7))){
								
							}else{
							if(settleArea<lowerLimitOfSettleArea){
								errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的理赔面积小于"+lowerLimitOfSettleArea+"亩"+enterSymbol);
								continue;
							}
						   }
						}
						plantingSettleListDto.setSettlearea(settleArea);
						if(plantingSettleListTotalDto.getSettlearea()==0)
							plantingSettleListTotalDto.setSettlearea(settleArea);
						else plantingSettleListTotalDto.setSettlearea(plantingSettleListTotalDto.getSettlearea()+settleArea);
						
						//损失率必须在规定的损失范围内。
						double lossRate = transformStringToDouble(strfLostRate);
						lossRate = PlantingSettleExport.round(lossRate, 2);
						if(lowerLimitOfPartialLoss>lossRate){
							errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的损失率小于"+lowerLimitOfPartialLoss+enterSymbol);
							continue;
						}
						if(topLimitOfTotalLoss<lossRate){
							errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的损失率大于"+topLimitOfTotalLoss+enterSymbol);
							continue;
						}
						plantingSettleListDto.setLossrate(lossRate);
						
						//生长期比率必须在规定的范围内。
//						double grownSeason = transformStringToDouble(strfGrowingSeason);
//						if(topLimitOfGrownSeason<grownSeason || lowerLimitOfGrownSeason>=grownSeason){
//							errorMessage += "第"+(i+1)+"行，农户"+fCode+"的生长期比率必须在"+lowerLimitOfGrownSeason+"到"+topLimitOfGrownSeason+"之间！"+enterSymbol;
//							continue;
//						}
//						plantingSettleListDto.setGrowingseason(grownSeason);
						
						//赔付比例必须在规定的范围内。
						double claimRate = transformStringToDouble(strfClaimRate);
						claimRate = PlantingSettleExport.round(claimRate, 2);
						if(topLimitOfClaimRate<claimRate || lowerLimitOfClaimRate>=claimRate){
							errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的赔付比率必须在"+lowerLimitOfClaimRate+"到"+topLimitOfClaimRate+"之间！"+enterSymbol);
							continue;
						}
						claimRateMap.put(claimRate, claimRate);
						plantingSettleListDto.setClaimrate(claimRate);
						
						//计算赔款金额
						//plantingPolicyListDto 应该替换成为出险时清单数据。
						double settleSum = calculateSettleSum(prpCitemKindSchema,settleArea,lossRate,claimRate,plantingPolicyListDto);
						settleSum = PlantingSettleExport.round(settleSum, 2);
						plantingSettleListDto.setSettlesum(String.valueOf(settleSum));
						if("0".equals(plantingSettleListTotalDto.getSettlesum()))
							plantingSettleListTotalDto.setSettlesum(String.valueOf(settleSum));
						else plantingSettleListTotalDto.setSettlesum(plantingSettleListTotalDto.getSettlesum()+settleSum);
						
						//存入电话号码和备注。
						plantingSettleListDto.setPhone(fPhone);
						plantingSettleListDto.setRemark(fRemark);
						
						plantingSettleListDtoList.add(plantingSettleListDto);
						if(newTotalDto)
							plantingSettleListTotalDtoList.add(plantingSettleListTotalDto);
						

						//与保单最新清单进行总亩数和总金额的校验。
						checkSumAreaAndSumAmount(errorMessage,plantingSettleListTotalDto,plantingPolicyListDto,true,enterSymbol);
						//与出险时清单进行总亩数和总金额的校验。
//						checkSumAreaAndSumAmount(errorMessage,plantingSettleListTotalDto,plantingPolicyListDto,false,enterSymbol);
						PlantingpolicylistDto damageDatePlantingPolicyListDto = getDamageDatePlantingPolicyListDto(plantingPolicyListDto, strDamageDate, strDamageHour, policyNo, kindCode, fCode, riskCode);
						checkSumAreaAndSumAmount(errorMessage,plantingSettleListTotalDto,damageDatePlantingPolicyListDto,false,enterSymbol);
						
						//对于案后重开的案件，如果理赔面积小于0，增加与本案之前的理赔清单的总金额和面积校验。
						if(isReopen){
							if(settleArea<0){
								errorMessage = checkReopenCaseSettleList(errorMessage,plantingSettleListTotalDto,reopenSettleCodeList,enterSymbol);
							}
						}
					}
				}
				errorMessage = checkKindCodeType(errorMessage,kindCodeMap);
				errorMessage = checkClaimRate(errorMessage,claimRateMap);
			}
			resultMap.put("plantingSettleListDtoList", plantingSettleListDtoList);
			resultMap.put("errorMessage", errorMessage);
			workbook.close();
		}catch (BiffException e){
			e.printStackTrace();
		//	workbook.close();
			return null;
		}catch (IOException e){
			e.printStackTrace();
			return null;
		}catch (Exception e){
			e.printStackTrace();
			return null;
		}finally{
			if (workbook!=null)
				workbook.close();
		}
		return resultMap;
	}

	public static String trimAllSpace(String str) {
		//return str == null ? str : str.replaceAll("^[\\s　]*|[\\s　]*$", "");  
		return str == null ? str : str.replaceAll("^[\\s　]*|，。？：；‘’！“”―……、|[\\s　]*$", "");  
	}
	private String getKindCodeByCName(String cName){
		String kindCode = "";
		String sqlCondition = " kindCName like '"+cName+"' ";
		BLPrpDkind blPrpDkind = new BLPrpDkind();
		try {
			blPrpDkind.query(sqlCondition);
			if(1==blPrpDkind.getSize())
				kindCode = blPrpDkind.getArr(0).getKindCode();
			else throw new Exception("无法找到 "+cName+" 对应的险别代码，请检查！");
		} catch (UserException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return kindCode;
	}
	//根据节点类型判断是否是理算环节，非理算环节不涉及到案后重开。如果是理算环节，再根据立案号和保单号查询理算书表，如果已经存在理算书，则表明现在是在做案后重开。
	private boolean isReopenCase(String registNo, String policyNo, String nodeType, String compensateNo){
		boolean isReopen = false;
		if(UIClaimGetSettleListFacade.nodeList[2].equals(nodeType)){
			BLPrpLcompensate blPrpLcompensate = new BLPrpLcompensate();
			BLPrpLclaimFacade blPrpLclaimFacade = new BLPrpLclaimFacade();
			String sqlClaimCondition = " registNo like '"+registNo +"' and policyNo like '"+policyNo+"' ";
			try {
				Collection collectionPrpLclaim = blPrpLclaimFacade.findByConditions(sqlClaimCondition);
				if(null != collectionPrpLclaim && collectionPrpLclaim.size()==1){
					String claimNo = ((PrpLclaimDto)collectionPrpLclaim.toArray()[0]).getClaimNo();
					BLPrpLcompensateFacade blPrpLcompensateFacade = new BLPrpLcompensateFacade();
					String sqlCondition = " claimNo like '"+claimNo +"' and policyNo like '"+policyNo+"' ";
					if(null!=compensateNo && !"".equals(compensateNo))
						sqlCondition += " and compensateNo not like '"+compensateNo+"' ";
					blPrpLcompensate.query(sqlCondition);
					if( blPrpLcompensate.getSize()>0)
						isReopen = true;
				}
			} catch (UserException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return isReopen;
	}
	//将字符串型数据转化证浮点型数据。
	private double transformStringToDouble(String stringValue){
		double doubleValue = 0.0;
		if(null!=stringValue && !"".equals(stringValue)){
			stringValue = trimAllSpace(stringValue);
			doubleValue = Double.parseDouble(stringValue);
		}
		return doubleValue;
	}
	//将部分不能从excel导入的基本信息，从保单清单数据中转储到理赔清单中。
	private PlantingsettlelistDto getBasicInfoFromPolicyList(PlantingsettlelistDto plantingSettleListDto, PlantingpolicylistDto plantingPolicyListDto,HttpServletRequest httpServletRequest){
		plantingSettleListDto.setFname(plantingPolicyListDto.getFname());
		plantingSettleListDto.setFidcard(plantingPolicyListDto.getFidcard());
		plantingSettleListDto.setZhibuka(plantingPolicyListDto.getZhibuka());
		plantingSettleListDto.setFareacode(plantingPolicyListDto.getFareacode());
		plantingSettleListDto.setBank(plantingPolicyListDto.getBank());
		plantingSettleListDto.setInusrelistcode(plantingPolicyListDto.getInusrelistcode());
		plantingSettleListDto.setClasscode(plantingPolicyListDto.getClasscode());
		plantingSettleListDto.setInsurearea(plantingPolicyListDto.getInsurearea());
		plantingSettleListDto.setSuminsured(String.valueOf(plantingPolicyListDto.getSumamount()));
		plantingSettleListDto.setFieldsource(plantingPolicyListDto.getFieldsource());
		plantingSettleListDto.setValidity("1");
		plantingSettleListDto.setNodetype(httpServletRequest.getParameter("nodeType"));
		plantingSettleListDto.setWarrant(plantingPolicyListDto.getWarrant());
		plantingSettleListDto.setFcode(plantingPolicyListDto.getFcode());
		plantingSettleListDto.setRiskcode(plantingPolicyListDto.getRiskcode());
		plantingSettleListDto.setKindcode(plantingPolicyListDto.getKindcode());
		plantingSettleListDto.setTaxarea(plantingPolicyListDto.getTaxarea());
		plantingSettleListDto.setAtarea(plantingPolicyListDto.getAtarea());
		plantingSettleListDto.setLitterArea(plantingPolicyListDto.getLitterArea());
		plantingSettleListDto.setWoodlandArea(plantingPolicyListDto.getWoodlandArea());
		return plantingSettleListDto;
	}
	//根据保单号，险种代码，险别代码获取一条标的子险信息。可为主险，也可为附加险。
	private PrpCitemKindSchema getPrpCitemKindSchema(String policyNo, String riskCode, String kindCode){
		PrpCitemKindSchema prpCitemKindSchema = null;
		try {
			if(null!=riskCode && !"".equals(riskCode) && null!=kindCode && !"".equals(kindCode)){
				BLPrpCitemKind blPrpCitemKind = new BLPrpCitemKind();
				blPrpCitemKind.getData(policyNo);
				Collection prpCitemKindSchemaes = blPrpCitemKind.getSchemas();
				if(null!=prpCitemKindSchemaes && prpCitemKindSchemaes.size()>0){
					Iterator it = prpCitemKindSchemaes.iterator();
					String riskCodeTemp = "";
					String kindCodeTemp = "";
					while(it.hasNext()){
						PrpCitemKindSchema prpCitemKindSchemaTemp = (PrpCitemKindSchema)it.next();
						riskCodeTemp = prpCitemKindSchemaTemp.getRiskCode();
						kindCodeTemp = prpCitemKindSchemaTemp.getKindCode();
						if(riskCode.equals(riskCodeTemp) && kindCode.equals(kindCodeTemp)){
							prpCitemKindSchema = prpCitemKindSchemaTemp;
							break;
						}
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return prpCitemKindSchema;
	}
	//根据规则计算出赔偿金额。
	private double calculateSettleSum(PrpCitemKindSchema prpCitemKindSchema, double settleArea, double lossRate, double claimRate, PlantingpolicylistDto plantingPolicyListDto){
		double settleSum = 0.0;
		//
		String  versionType = "";
		BLPrpCmain blPrpCmain= new BLPrpCmain();
		PrpCmainSchema prpCmainSchema = new PrpCmainSchema();
		try {
			blPrpCmain.getData(prpCitemKindSchema.getPolicyNo());
			if(blPrpCmain.getSize() == 1){
				prpCmainSchema = blPrpCmain.getArr(0);
				 if(!(prpCmainSchema.getVersionNo()==null ||prpCmainSchema.getVersionNo()==""))
				  {
					  versionType = prpCmainSchema.getVersionNo().substring(0,1);
				  }
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//
		String riskCode = prpCitemKindSchema.getRiskCode();
		double lowerLimitOfPartialLoss = 0.3;
		if(0!=transformStringToDouble(prpCitemKindSchema.getTriggerPoint()));//起赔点
			lowerLimitOfPartialLoss = transformStringToDouble(prpCitemKindSchema.getTriggerPoint())/100;
		double topLimitOfPartialLoss = 0.8;
		if(0!=transformStringToDouble(prpCitemKindSchema.getTotalLossRatio()))
				topLimitOfPartialLoss = transformStringToDouble(prpCitemKindSchema.getTotalLossRatio())/100;//全损起点
		double deductibleRate = 0.0;		
		//免赔金额汇总,3191苗木专用.
		double deductibleSum =  0.0;
		//白术保险免赔率默认值为0，按照实际免赔率赔付！
		if("3143".equals(riskCode) || "3101".equals(riskCode)|| "3139".equals(riskCode) || "3142".equals(riskCode) || "3146".equals(riskCode) || "3186".equals(riskCode) || "3144".equals(riskCode)||"3190".equals(riskCode))
			//3143 白术 3142 桔梗，3146 菊花，3186 蓝莓，3139 石榴，3144 樱桃 
			deductibleRate = 0.00;	//免赔率
		if(0!=transformStringToDouble(prpCitemKindSchema.getDeductibleRate()))
			deductibleRate = transformStringToDouble(prpCitemKindSchema.getDeductibleRate())/100;//免赔率
		if("3150".equals(riskCode) || "3148".equals(riskCode) || "3174".equals(riskCode))
		{
			deductibleRate = 0.00;
			lowerLimitOfPartialLoss = 0.3;
			topLimitOfPartialLoss = 0.8;
		}
		if("3161".equals(riskCode) || "3162".equals(riskCode) || "3164".equals(riskCode))
		{
			//deductibleRate = 0.0;
			//lowerLimitOfPartialLoss = 0.2;
			//topLimitOfPartialLoss = 0.8;
		}
		
		if("3165".equals(riskCode))
		{
			lowerLimitOfPartialLoss = 0.0;
			topLimitOfPartialLoss = 1.0;
		}
		if("3184".equals(riskCode) ||"3170".equals(riskCode))
		{
			deductibleRate = 0.0;
			lowerLimitOfPartialLoss = 0.0;
			topLimitOfPartialLoss = 0.9;
		}
		if("31A6".equals(riskCode))
		{
			deductibleRate = 0.0;
			lowerLimitOfPartialLoss = 0.2;
			topLimitOfPartialLoss = 0.8;
		}
		// 贵州险种的起赔点/免赔/全损在这里统一处理
		if(versionType.equals("D")) {
			if("3101,3114,3158".indexOf(riskCode) > -1) {
				deductibleRate = transformStringToDouble(prpCitemKindSchema.getDeductibleRate())/100;//免赔率
				lowerLimitOfPartialLoss = transformStringToDouble(prpCitemKindSchema.getTriggerPoint())/100;
				topLimitOfPartialLoss = transformStringToDouble(prpCitemKindSchema.getTotalLossRatio())/100;//全损起点
			}
			if("3179".indexOf(riskCode) > -1) {
				deductibleRate = 0.0;//免赔率
				lowerLimitOfPartialLoss = 0.2;
				topLimitOfPartialLoss = 0.8;//全损起点
			}
		}
		
		double amount = transformStringToDouble(prpCitemKindSchema.getUnitAmount());//单位保额
		lossRate = lossRate/100;//把百分比的损失率80 换成小数0.8
		//中央政策性险种理赔计算公式与非政策性险种不同，分开计算
		if("3139".equals(riskCode) || "3186".equals(riskCode) || "3144".equals(riskCode)|| "3145".equals(riskCode)  || "3132".equals(riskCode) ){
			if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss)
			//对于部分损失的（如30%<=损失率<80%）的按部分损失的公式计算：单位保额*赔付面积*赔付比例*损失率*(1-免赔率）
				settleSum = amount*settleArea*claimRate*lossRate*(1-deductibleRate);
			else if(lossRate>=topLimitOfPartialLoss)
			//对于全损（如损失率>=80%）的按全损公式计算：单位保额*赔付面积*赔付比例
				settleSum = amount*settleArea*claimRate;
		}else if("3161".equals(riskCode)||"3162".equals(riskCode) ||"3164".equals(riskCode)){
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss)
					//对于部分损失的（如20%<=损失率<80%）的按部分损失的公式计算：单位保额 ×  损失程度 * 赔付面积
						settleSum = amount*settleArea*lossRate*claimRate;
					else if(lossRate>=topLimitOfPartialLoss)
					//对于全损（如损失率>=80%）的按全损公式计算：单位保额 ×  损失程度×赔付面积
						settleSum = amount*settleArea*claimRate;
		}else if("3149".equals(riskCode)){//森林保险计算公式与其他险种均不同，需要单独计算
			if("B".equalsIgnoreCase(versionType) ||  !checkRiskVersion("CLAIM_VERSIONDATEAH3149","3149",prpCitemKindSchema.getPolicyNo())){
				//System.err.println("henan");
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss)
					//对于部分损失的（如30%<=损失率<80%）的按部分损失的公式计算：单位保额 ×  损失程度 * 赔付面积
						settleSum = amount*settleArea*lossRate;
					else if(lossRate>=topLimitOfPartialLoss)
					//对于全损（如损失率>=80%）的按全损公式计算：单位保额 ×  损失程度×赔付面积
						settleSum = amount*settleArea;
					
				}
			else
				{
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
					//保险林木发生保险事故，损失程度在10%（含10%）至90%时，保险人按以下公式计算赔偿金额： 
					if(Math.abs(settleArea)*0.1<10)
					//分户损失面积  *  10%  <  10亩: 
				    //赔偿金额  =  每亩保险金额  ×  损失程度  ×  损失面积  ×（1－绝对免赔率） 
						settleSum = amount * lossRate * settleArea * (1-deductibleRate);
					else{
						if(settleArea>0){
					//分户损失面积  *  10%  >=  10亩: 
					//赔偿金额  =  每亩保险金额  ×  损失程度  ×  （损失面积-10）
						settleSum = amount * lossRate * (settleArea-10);
						} else
							settleSum = amount * lossRate * (Math.abs(settleArea)-10) * -1;	
						}
				}else if(lossRate>=topLimitOfPartialLoss)
					//保险林木发生保险事故，损失程度在90%（含90%）以上的，保险人按以下公式计算赔偿金额： 
					//赔偿金额  =  每亩保险金额  ×  损失面积
						settleSum = amount * settleArea;
	
				}
			
		}
		else if("3177".equals(riskCode)){//3177计算公式与其他险种均不同，需要单独计算
			// 湖北:每亩保险金额×损失程度×受损面积×投保面积/实有林地面积×（1－-10%）
			if("C".equalsIgnoreCase(versionType)){
				double woodland = plantingPolicyListDto.getWoodlandArea();
				double area = plantingPolicyListDto.getInsurearea();
				if(woodland > 0.0) {
					//条款变更后不再计算林地面积比例和免赔率
					settleSum = amount*settleArea*lossRate;
				}
				else settleSum = 0.0;
			}
			// 贵州
			if("D".equalsIgnoreCase(versionType)){
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){

				    //赔偿金额  =  每亩保险金额  × 损失程度  ×  损失面积 
					settleSum = amount*settleArea*lossRate;
				
				}else if(lossRate>=topLimitOfPartialLoss)
				{

					//赔偿金额  =  每亩保险金额  ×  损失面积
						settleSum = amount *settleArea;

				}
			}
		}
		else if("3157".equals(riskCode)){
			// 贵州
			if("D".equalsIgnoreCase(versionType)){
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){

				    //赔偿金额  =  每亩保险金额  × 损失程度  ×  损失面积 
					settleSum = amount*settleArea*lossRate*claimRate;
				
				}else if(lossRate>=topLimitOfPartialLoss)
				{

					//赔偿金额  =  每亩保险金额  ×  损失面积
						settleSum = amount *settleArea*claimRate;

				}
			}else if("C".equalsIgnoreCase(versionType)){
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){

				    //赔偿金额  =  每亩保险金额  × 损失程度  ×  损失面积 
					settleSum = amount*settleArea*lossRate*claimRate* (1-deductibleRate);
				
				}else if(lossRate>=topLimitOfPartialLoss)
				{

					//赔偿金额  =  每亩保险金额  ×  损失面积
						settleSum = amount *settleArea*claimRate;

				}
			}
		
		}
		else if("3181".equals(riskCode)){
			// 贵州
			if("D".equalsIgnoreCase(versionType)){
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){

				    //赔偿金额  =  每亩保险金额  × 损失程度  ×  损失面积 
					settleSum = amount*settleArea*lossRate*claimRate;
				
				}else if(lossRate>=topLimitOfPartialLoss)
				{

					//赔偿金额  =  每亩保险金额  ×  损失面积
						settleSum = amount *settleArea*claimRate;

				}
			}
		
		}
		else if("3170".equals(riskCode)){
			// 贵州
			if("D".equalsIgnoreCase(versionType)){
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){

				    //赔偿金额  =  每亩保险金额  × 损失程度  ×  损失面积 
					settleSum = amount*settleArea*lossRate*claimRate;
				
				}else if(lossRate>=topLimitOfPartialLoss)
				{

					//赔偿金额  =  每亩保险金额  ×  损失面积
						settleSum = amount *settleArea*claimRate;

				}
			}
		
		}
		else if("31A6".equals(riskCode)){
			// 贵州
			if("D".equalsIgnoreCase(versionType)){
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){

				    //赔偿金额  =  每亩保险金额  × 损失程度  ×  损失面积 
					settleSum = amount*settleArea*lossRate*claimRate;
				
				}else if(lossRate>=topLimitOfPartialLoss)
				{

					//赔偿金额  =  每亩保险金额  ×  损失面积
						settleSum = amount *settleArea*claimRate;

				}
			}
		
		}
		else if("3172".equals(riskCode))
		{
			if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){

			    //赔偿金额  =  每亩保险金额  × 赔付比例×  损失程度  ×  损失面积  ×（1－绝对免赔率） 
				settleSum = amount*settleArea*claimRate*lossRate*(1-deductibleRate);
			
			}else if(lossRate>=topLimitOfPartialLoss)
			{

				//赔偿金额  =  每亩保险金额  ×  损失面积  × 赔付比例
					settleSum = amount *claimRate* settleArea;

			}
		}
		else if("3191".equals(riskCode)){//苗木保险计算公式与其他险种均不同，需要单独计算
			deductibleRate = 0.10;
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
					//保险苗木发生保险事故，损失程度在10%（含10%）至90%时，保险人按以下公式计算赔偿金额：
					//按照苗木保险的条款计算免赔金额的10%与1000元进行比较
					deductibleSum = amount * lossRate * settleArea * deductibleRate;
					if(deductibleSum>1000)
						//赔偿金额  =  每亩保险金额  ×  损失程度  ×  损失面积  ×（1－绝对免赔率） 
						settleSum = amount * lossRate * settleArea * (1-deductibleRate);
					else
					
				    //赔偿金额  =  每亩保险金额  ×  损失程度  ×  损失面积  -1000
						settleSum = amount * lossRate * settleArea -1000;
				}else if(lossRate>=topLimitOfPartialLoss){
					//保险苗木发生保险事故，损失程度在90%（含90%）以上的，保险人按以下公式计算赔偿金额： 
					//按照苗木保险的条款计算免赔金额的10%与1000元进行比较
					deductibleSum = amount  * settleArea * deductibleRate;
					//赔偿金额  =  每亩保险金额  ×  损失面积
					if(deductibleSum>1000)
					//赔偿金额  =  每亩保险金额    ×  损失面积  ×（1－绝对免赔率） 
					settleSum = amount  * settleArea * (1-deductibleRate);
					else
						//赔偿金额  =  每亩保险金额   ×  损失面积  -1000
					settleSum = amount  * settleArea -1000;
	
					}
				}
			//else if("3228".equals(riskCode)||"3224".equals(riskCode)){//3228,3224计算公式与其他险种均不同，需要单独计算
		    else if("3224".equals(riskCode)){//3228,3224计算公式与其他险种均不同，需要单独计算
			lowerLimitOfPartialLoss = 0.2;
			if(lowerLimitOfPartialLoss<=lossRate ){
				if("3224".equals(riskCode))
				deductibleRate= 0.30;
				else
				deductibleRate= 0.20;
			settleSum = amount * lossRate * claimRate * settleArea * (1-deductibleRate);
			System.err.println("3224测试免赔率"+deductibleRate);
			}
		}
	    else if("3176".equals(riskCode)) {
	    	if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss)
				//对于部分损失的：单位保险金额 × 损失率 × 损失面积
				settleSum = amount*settleArea*lossRate;
			else if(lossRate>=topLimitOfPartialLoss)
				//对于全损：单位保险金额 × 损失面积
				settleSum = amount*settleArea;
	    }
	    else if("3184".equals(riskCode)) {
	    	if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss)
				//对于部分损失的：单位保险金额 × 损失率 × 损失面积
				settleSum = amount*settleArea*claimRate*lossRate;
			else if(lossRate>=topLimitOfPartialLoss)
				//对于全损：单位保险金额 × 损失面积
				settleSum = amount*settleArea*claimRate;
	    }
		else if("3187".equals(riskCode)) {
				if(prpCitemKindSchema.getItemCode().equals("Z002")) {
					if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss)
						//对于部分损失的：单位保险金额 × 损失率 × 损失面积 × （1 - 绝对免赔率）
						settleSum = amount*settleArea*lossRate*(1-deductibleRate);
					else if(lossRate>=topLimitOfPartialLoss) {
						//对于全损：单位保险金额 × 损失率 × 损失面积
						lossRate = 1;  // 全损的损失率为100%
						settleSum = amount*settleArea*lossRate;
					}
				}
				else if(prpCitemKindSchema.getItemCode().equals("Z003")) {
					if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss)
						//对于部分损失的：单位保险金额 × 赔付比例 × 损失率 × 损失面积 × （1 - 绝对免赔率） 
						settleSum = amount*settleArea*claimRate*lossRate*(1-deductibleRate);
					else if(lossRate>=topLimitOfPartialLoss) {
						//对于全损：单位保险金额 × 赔付比例 × 损失率 × 损失面积
						lossRate = 1;  // 全损的损失率为100%
						settleSum = amount*settleArea*claimRate*lossRate;
					}
				}
				else if(prpCitemKindSchema.getItemCode().equals("Z001")){
					if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss)
						//对于部分损失的：单位保险金额 × 赔付比例 × 损失面积 × （损失率 - 20.0%）
						settleSum = amount*settleArea*claimRate*(lossRate-0.2);
					else if(lossRate>=topLimitOfPartialLoss) {
						//对于全损：单位保险金额 × 赔付比例 × 损失面积 × 损失率
						lossRate = 1;  // 全损的损失率为100%
						settleSum = amount*settleArea*claimRate*lossRate;
					}
				}
		}
		else if("3151".equals(riskCode)) {
			// 湖北
			if(versionType.startsWith("C")) {
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
					//赔偿金额  =  每亩保险金额  × 赔付比例×  损失面积  ×损失率
					settleSum = amount*settleArea*claimRate*lossRate;
				} else if(lossRate>=topLimitOfPartialLoss) {
					//赔偿金额  =  每亩保险金额  ×  损失面积  × 赔付比例
					settleSum = amount *claimRate* settleArea;
				}
			}
			// 安徽
			else {
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
					//赔偿金额  =  每亩保险金额  × 赔付比例×  损失面积  ×（损失率-10%） 
					settleSum = amount*settleArea*claimRate*lossRate;
				} else if(lossRate>=topLimitOfPartialLoss) {
					//赔偿金额  =  每亩保险金额  ×  损失面积  × 赔付比例
					settleSum = amount *claimRate* settleArea;
				}
			}
		}
		else if("3197".equals(riskCode)) {
			// 湖北
			if(versionType.startsWith("C")) {
				topLimitOfPartialLoss = 0.8;
				//System.out.println("################"+topLimitOfPartialLoss);
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
					//赔偿金额  =  每亩保险金额  × 赔付比例×  损失面积  ×损失率
					settleSum = amount*settleArea*claimRate*lossRate;
				} else if(lossRate>=topLimitOfPartialLoss) {
					//赔偿金额  =  每亩保险金额  ×  损失面积  × 赔付比例
					settleSum = amount *claimRate* settleArea;
				}
			}
		}
		else if("3158".equals(riskCode) || "3179".equals(riskCode)) {
			// 贵州
			if(versionType.startsWith("D")) {
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
					//赔偿金额  =  每亩保险金额  × 赔付比例×  损失面积  ×损失率
					settleSum = amount*settleArea*claimRate*lossRate;
				} else if(lossRate>=topLimitOfPartialLoss) {
					//赔偿金额  =  每亩保险金额  ×  损失面积  × 赔付比例
					settleSum = amount *claimRate* settleArea;
				}
			}
		}
		else{
			if("B".equalsIgnoreCase(versionType)){
				if( ("3107".equals(riskCode)&&checkRiskVersion("CLAIM_VERSIONDATEHN","3107",prpCitemKindSchema.getPolicyNo())) 
						|| ("3126".equals(riskCode)&&checkRiskVersion("CLAIM_VERSIONDATEHN3126","3126",prpCitemKindSchema.getPolicyNo()))
						||("3114".equals(riskCode)&&checkRiskVersion("CLAIM_VERSIONDATEHN","3114",prpCitemKindSchema.getPolicyNo()))
						|| "3185".equals(riskCode) ){
					if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss)
					//对于部分损失的（如30%<=损失率<80%）的按部分损失的公式计算：单位保额*赔付面积*赔付比例*（损失率-免赔率）
						settleSum = amount*settleArea*claimRate*lossRate*(1-deductibleRate);
					else if(lossRate>=topLimitOfPartialLoss)
					//对于全损（如损失率>=80%）的按全损公式计算：单位保额*赔付面积*赔付比例
						settleSum = amount*settleArea*claimRate*(1-deductibleRate);
					} else
				if( "3101".equals(riskCode)||"3122".equals(riskCode) 
						||("3107".equals(riskCode)&&!checkRiskVersion("CLAIM_VERSIONDATEHN","3107",prpCitemKindSchema.getPolicyNo()))
						||("3126".equals(riskCode)&&!checkRiskVersion("CLAIM_VERSIONDATEHN3126","3126",prpCitemKindSchema.getPolicyNo())) 
						||("3114".equals(riskCode)&&!checkRiskVersion("CLAIM_VERSIONDATEHN","3114",prpCitemKindSchema.getPolicyNo())) 
						||("3108".equals(riskCode))){
					if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss)
					//对于部分损失的（如30%<=损失率<80%）的按部分损失的公式计算：单位保额*赔付面积*赔付比例*（损失率-免赔率）
						settleSum = amount*settleArea*claimRate*lossRate;
					else if(lossRate>=topLimitOfPartialLoss)
					//对于全损（如损失率>=80%）的按全损公式计算：单位保额*赔付面积*赔付比例
						settleSum = amount*settleArea*claimRate;
					} else
				 if("3174".equals(riskCode))
				 {
						if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss)
							//对于部分损失的（如30%<=损失率<80%）的按部分损失的公式计算：单位保额*赔付面积*赔付比例*（损失率-免赔率）
								settleSum = amount*settleArea*claimRate*lossRate;
							else if(lossRate>=topLimitOfPartialLoss)
							//对于全损（如损失率>=80%）的按全损公式计算：单位保额*赔付面积*赔付比例
								settleSum = amount*settleArea*claimRate;
				 }
				if("3190".equals(riskCode))
				 {
						if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss)
							//对于部分损失的（如30%<=损失率<80%）的按部分损失的公式计算：单位保额*赔付面积*赔付比例*（损失率-免赔率）
								settleSum = amount*settleArea*claimRate*lossRate;
							else if(lossRate>=topLimitOfPartialLoss)
							//对于全损（如损失率>=80%）的按全损公式计算：单位保额*赔付面积*赔付比例
								settleSum = amount*settleArea*claimRate;
				 }
				if("3178".equals(riskCode))
				 {
						if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss)
							//对于部分损失的（如30%<=损失率<80%）的按部分损失的公式计算：单位保额*赔付面积*赔付比例*（损失率-免赔率）
								settleSum = amount*settleArea*claimRate*lossRate;
							else if(lossRate>=topLimitOfPartialLoss)
							//对于全损（如损失率>=80%）的按全损公式计算：单位保额*赔付面积*赔付比例
								settleSum = amount*settleArea*claimRate;
				 }
				
			}
		else{
			// 2016.3.15 湖北水稻3101，赔款计算的全损比例调整至70%
			if(versionType.startsWith("C") && "3101".equals(riskCode) || versionType.startsWith("C") && "3107".equals(riskCode))
				topLimitOfPartialLoss = 0.7;
			//yx 湖北棉花全损 80%
			if(versionType.startsWith("C") && "3122".equals(riskCode))
				topLimitOfPartialLoss = 0.8;
			if(versionType.startsWith("D") && "3107".equals(riskCode)||versionType.startsWith("D") && "3108".equals(riskCode)||versionType.startsWith("D") && "3114".equals(riskCode))
				topLimitOfPartialLoss = 0.8;
			//yx
			if (("3101".equals(riskCode) && !checkRiskVersion("CLAIM_VERSIONDATEHN3101","3101",prpCitemKindSchema.getPolicyNo()))
			   || ("3107".equals(riskCode) && !checkRiskVersion("CLAIM_VERSIONDATEHN3107","3107",prpCitemKindSchema.getPolicyNo()))
			   || ("3108".equals(riskCode) && !checkRiskVersion("CLAIM_VERSIONDATEHN3108","3108",prpCitemKindSchema.getPolicyNo()))
			   || ("3114".equals(riskCode) && !checkRiskVersion("CLAIM_VERSIONDATEHN3114","3114",prpCitemKindSchema.getPolicyNo()))
			   || ("3122".equals(riskCode) && !checkRiskVersion("CLAIM_VERSIONDATEHN3122","3122",prpCitemKindSchema.getPolicyNo()))
			   || ("3151".equals(riskCode) && !checkRiskVersion("CLAIM_VERSIONDATEAH3151","3151",prpCitemKindSchema.getPolicyNo()))
			   || ("3152".equals(riskCode) && !checkRiskVersion("CLAIM_VERSIONDATEAH3152","3152",prpCitemKindSchema.getPolicyNo()))
			   || ("3155".equals(riskCode) && !checkRiskVersion("CLAIM_VERSIONDATEAH3155","3155",prpCitemKindSchema.getPolicyNo()))
			   || ("3156".equals(riskCode) && !checkRiskVersion("CLAIM_VERSIONDATEAH3156","3156",prpCitemKindSchema.getPolicyNo()))
			   || ("3126".equals(riskCode) && !checkRiskVersion("CLAIM_VERSIONDATEHN3126","3126",prpCitemKindSchema.getPolicyNo()))){
			if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss)
				//对于部分损失的（如30%<=损失率<80%）的按部分损失的公式计算：单位保额*赔付面积*赔付比例*损失率
					settleSum = amount*settleArea*claimRate*lossRate;
				else if(lossRate>=topLimitOfPartialLoss)
				//对于全损（如损失率>=80%）的按全损公式计算：单位保额*赔付面积*赔付比例
					settleSum = amount*settleArea*claimRate;
			}
			else{
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss)
					//对于部分损失的（如30%<=损失率<80%）的按部分损失的公式计算：单位保额*赔付面积*赔付比例*（损失率-免赔率）
						settleSum = amount*settleArea*claimRate*(lossRate-deductibleRate);
					else if(lossRate>=topLimitOfPartialLoss)
					//对于全损（如损失率>=80%）的按全损公式计算：单位保额*赔付面积*赔付比例
						settleSum = amount*settleArea*claimRate;
				
			}
		}
	}
		return settleSum;
	}
	//农户的赔付总面积不能大于剩余面积。
	//农户的赔付金额不能大于剩余保额。
	//如果isNewestList 为true,则比较的是最新保单清单中的农户的剩余面积和剩余保额。
	//如果isNewestList 不为true,则比较的是出险时保单清单中的农户的剩余面积和剩余保额。
	private StringBuffer checkSumAreaAndSumAmount(StringBuffer errorMessage, PlantingsettlelistDto plantingSettleListTotalDto, PlantingpolicylistDto plantingPolicyListDto, boolean isNewestList, String enterSymbol){
		String settleSum = plantingSettleListTotalDto.getSettlesum();
		double settleArea = plantingSettleListTotalDto.getSettlearea();
		double sumAmount = plantingPolicyListDto.getSumamount();
		double insureArea = plantingPolicyListDto.getInsurearea();
		if(settleArea>insureArea){
			if(isNewestList)
				errorMessage.append("农户："+plantingSettleListTotalDto.getFcode()+"的理赔面积大于当前剩余面积。"+enterSymbol);
			else errorMessage.append("农户："+plantingSettleListTotalDto.getFcode()+"的理赔面积大于出险时剩余面积。"+enterSymbol);
		}
		System.err.println("xxxx "+settleSum);
		System.err.println(Double.parseDouble(settleSum));
		BigDecimal aa=new BigDecimal(Double.parseDouble(settleSum));
		BigDecimal bb=new BigDecimal(sumAmount);
		int jj=aa.compareTo(bb);
		//if(Double.parseDouble(settleSum)>sumAmount){
		if(jj > 0){
			if(isNewestList)
				errorMessage.append("农户："+plantingSettleListTotalDto.getFcode()+"的理赔金额大于当前剩余保额。"+enterSymbol);
			else errorMessage.append("农户："+plantingSettleListTotalDto.getFcode()+"的理赔金额大于出险时剩余保额。"+enterSymbol);
		}
		return errorMessage;
	}
	//根据
	private List getAllReopenSettleCodeList(String registNo, String policyNo, String compensateNo){
		List reopenSettleCodeList = new ArrayList();
		try {
			BLPrpLclaimFacade blPrpLclaimFacade = new BLPrpLclaimFacade();
			String sqlClaimCondition = " registNo like '"+registNo +"' and policyNo like '"+policyNo+"' ";
			Collection collectionPrpLclaim = blPrpLclaimFacade.findByConditions(sqlClaimCondition);
			if(null != collectionPrpLclaim && collectionPrpLclaim.size()==1){
				String claimNo = ((PrpLclaimDto)collectionPrpLclaim.toArray()[0]).getClaimNo();
				BLPrpLcompensateFacade blPrpLcompensateFacade = new BLPrpLcompensateFacade();
				String sqlCondition = " claimNo like '"+claimNo +"' and policyNo like '"+policyNo+"' ";
				if(null!=compensateNo && !"".equals(compensateNo))
					sqlCondition += " and compensateNo not like '"+compensateNo+"' ";
				Collection collectionPrpLcompensate = blPrpLcompensateFacade.findByConditions(sqlCondition);
				if(null != collectionPrpLcompensate && collectionPrpLcompensate.size()>0){
					Iterator it = collectionPrpLcompensate.iterator();
					List prpLcompensateNoList = new ArrayList();
					while(it.hasNext()){
						PrpLcompensateDto prpLcompensateDto = (PrpLcompensateDto)it.next();
						prpLcompensateNoList.add(prpLcompensateDto.getCompensateNo());
					}
					if(null!=prpLcompensateNoList && prpLcompensateNoList.size()>0){
						reopenSettleCodeList = getSettleCodeListByCompensateNo(prpLcompensateNoList);
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return reopenSettleCodeList;
	}
	//
	private List getSettleCodeListByCompensateNo(List prpLcompensateNoList){
		List reopenSettleCodeList = new ArrayList();
		if(null!=prpLcompensateNoList && prpLcompensateNoList.size()>0){
			try {
				String strAllPrpLcompensateNo = "";
				for(int i = 0;i<prpLcompensateNoList.size();i++){
					if(i==0)
						strAllPrpLcompensateNo = "'"+prpLcompensateNoList.get(i)+"'";
					else strAllPrpLcompensateNo += ",'"+prpLcompensateNoList.get(i)+"'";
				}
				String sqlCondition = " validity like '2' and compensateNo in ("+strAllPrpLcompensateNo+")";
				BLSettlemainlistFacade blSettleMainListFacade = new BLSettlemainlistFacade();
				Collection collectionSettleMainList = blSettleMainListFacade.findByConditions(sqlCondition);
				if(null!=collectionSettleMainList && collectionSettleMainList.size()>0){
					Iterator it = collectionSettleMainList.iterator();
					while(it.hasNext()){
						SettlemainlistDto settleMainListDto = (SettlemainlistDto)it.next();
						reopenSettleCodeList.add(settleMainListDto.getSettlelistcode());
					}
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return reopenSettleCodeList;
	}
	private StringBuffer checkReopenCaseSettleList(StringBuffer errorMessage, PlantingsettlelistDto plantingSettleListTotalDto, List settleCodeList, String enterSymbol){
		if(null!=settleCodeList && settleCodeList.size()>0){
			String riskCode = plantingSettleListTotalDto.getRiskcode();
			String kindCode = plantingSettleListTotalDto.getKindcode();
			String fCode = plantingSettleListTotalDto.getFcode();
			String sqlCondition = "";
			String allSettleCode = "";
			for(int i=0;i<settleCodeList.size();i++){
				if(i==0)
					allSettleCode = "'"+settleCodeList.get(i)+"'";
				else allSettleCode += ",'"+settleCodeList.get(i)+"'";
			}
			sqlCondition = " fCode like '"+fCode+"' and riskCode like '"+riskCode+"' and kindCode like '"+kindCode+"' and validity like '1' and nodeType like 'compe' and settleListCode in ("+allSettleCode+")";
			try {
				BLPlantingsettlelistFacade blPlantingSettleListFacade = new BLPlantingsettlelistFacade();
				Collection collectionPlantingSettleList = blPlantingSettleListFacade.findByConditions(sqlCondition);
				double settleArea = plantingSettleListTotalDto.getSettlearea();
				double settleAreaOld = 0.0;
				String settleAmount = plantingSettleListTotalDto.getSettlesum();
				double settleAmountOld = 0.0;
				if(null!= collectionPlantingSettleList && collectionPlantingSettleList.size()>0){
					PlantingsettlelistDto plantingSettleListDto = new PlantingsettlelistDto();
					Iterator it = collectionPlantingSettleList.iterator();
					while(it.hasNext()){
						plantingSettleListDto = (PlantingsettlelistDto)it.next();
						settleAreaOld += plantingSettleListDto.getSettlearea();
						settleAmountOld += Double.parseDouble(plantingSettleListDto.getSettlesum());
					}
				}
				if(Math.abs(settleAreaOld)<Math.abs(settleArea))
					errorMessage.append("农户："+fCode+"的案后重开的理赔面积大于之前所有理算书面积之和。"+enterSymbol);
				if(Math.abs(settleAmountOld)<Math.abs(Double.parseDouble(settleAmount)))
					errorMessage.append("农户："+fCode+"的案后重开的理赔金额大于之前所有理算书金额之和。"+enterSymbol);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return errorMessage;
	}
	private PlantingsettlelistDto getDtoFromPlantingSettleListTotalDtoList(List plantingSettleListTotalDtoList,PlantingsettlelistDto plantingSettleListDto){
		PlantingsettlelistDto plantingSettleListTotalDto = new PlantingsettlelistDto();
		if(null!=plantingSettleListTotalDtoList && plantingSettleListTotalDtoList.size()>0){
			String fcode = plantingSettleListDto.getFcode();
			PlantingsettlelistDto plantingSettleListTotalDtoTemp = new PlantingsettlelistDto();
			for(int i=0;i<plantingSettleListTotalDtoList.size();i++){
				plantingSettleListTotalDtoTemp = (PlantingsettlelistDto)plantingSettleListTotalDtoList.get(i);
				if(fcode.equals(plantingSettleListTotalDtoTemp.getFcode())){
					plantingSettleListTotalDto = plantingSettleListTotalDtoTemp;
					break;
				}
			}
		}
		return plantingSettleListTotalDto;
	}
	private StringBuffer checkKindCodeType(StringBuffer errorMessage, Map kindCodeMap){
		if(null==kindCodeMap)
			errorMessage.append("险别代码录入为空，请检查！");
		else if(kindCodeMap.size()>1)
			errorMessage.append("一张理赔清单只能录入一个险别！请检查险别代码！");
		return errorMessage;
	}
	private StringBuffer checkClaimRate(StringBuffer errorMessage, Map cliamRateMap){
		if(null==cliamRateMap)
			errorMessage.append("赔付比例为空，请检查！");
		else if(cliamRateMap.size()>1)
			errorMessage.append("一张理赔清单只能录入一个赔付比例！请检查赔付比例！");
		return errorMessage;
	}
	
	/** *//**
	* 提供精确的小数位截断处理。
	* @param v 需要截断的数字
	* @param scale 小数点后保留几位
	* @return 截断后的结果
	*/
	public static double roundDown(double v,int scale){
		if(scale<0){
			throw new IllegalArgumentException("The scale must be a positive integer or zero");
		}
		BigDecimal b = new BigDecimal(Double.toString(v));
		BigDecimal one = new BigDecimal("1");
		return b.divide(one,scale,BigDecimal.ROUND_DOWN).doubleValue();
	}
	//根据报案号查询出险日期。
	private String getDamageDateByRegistNo(String registNo){
		String strDamageDate = "";
		try {
			BLPrpLregistFacade blPrpLregistFacade = new BLPrpLregistFacade();
			PrpLregistDto prpLregistDto = blPrpLregistFacade.findByPrimaryKey(registNo);
			if(null==prpLregistDto)
				return null;
			else{
				SimpleDateFormat dateToStr = new SimpleDateFormat ("yyyy-MM-dd");
		        // parse date to format String
				strDamageDate = dateToStr.format(prpLregistDto.getDamageStartDate());
			}
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return strDamageDate;
	}
	//根据报案号查询出险小时。
	private String getDamageHourByRegistNo(String registNo){
		String strDamageHour = "";
		try {
			BLPrpLregistFacade blPrpLregistFacade = new BLPrpLregistFacade();
			PrpLregistDto prpLregistDto = blPrpLregistFacade.findByPrimaryKey(registNo);
			if(null==prpLregistDto)
				return null;
			else{
				strDamageHour = prpLregistDto.getDamageStartHour();
			}
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return strDamageHour;
	}
	private PlantingpolicylistDto getDamageDatePlantingPolicyListDto(PlantingpolicylistDto plantingPolicyListDto, String strDamageDate, String strDamageHour, String policyNo, String kindCode, String fCode, String riskCode){
		PlantingpolicylistDto plantingPolicyListTempDto = plantingPolicyListDto;
		EndorseViewHelper endorseViewHelper = new EndorseViewHelper();
		try {
			plantingPolicyListTempDto = endorseViewHelper.findForEndorPlantinpolicylistBefore(plantingPolicyListTempDto,riskCode,kindCode,policyNo,strDamageDate,strDamageHour);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return plantingPolicyListTempDto;
	}
	//保存理赔清单数据到临时表中
	private boolean saveToTempTable(List plantingSettleList, String registNo, HttpServletRequest request)throws Exception{
		boolean saveResult = false;
		if(null!=plantingSettleList && plantingSettleList.size()>0){
			DBManager dbManager = new DBManager();
			String timeStamp = generateTimeStamp();
			try {
				dbManager.open("NXDADataSource");
				dbManager.beginTransaction();
				PlantingsettlelistDto plantingSettleListDto = null;
				BLPlantingsettlelisttempAction blPlantingSettleListTempAction = new BLPlantingsettlelisttempAction();
				for(int index=0;index<plantingSettleList.size();index++){
					plantingSettleListDto = (PlantingsettlelistDto)plantingSettleList.get(index);
					PlantingsettlelisttempDto plantingSettleListTempDto = plantingSettleListDto.evaluate(registNo, index, timeStamp);
					blPlantingSettleListTempAction.insert(dbManager, plantingSettleListTempDto);				
				}
				dbManager.commitTransaction();
				saveResult = true;
				request.setAttribute("timeStamp", timeStamp);
			}catch (Exception e) {
				dbManager.rollbackTransaction();
				// TODO Auto-generated catch block
				e.printStackTrace();
			}finally{
				dbManager.close();
			}
		}
		return saveResult;
	}
	//根据报案号删除理赔清单临时表中的对应数据。
	private void deletePrevousTempData(String registNo, String timeStamp)throws Exception{
		String sqlCondition = " registCode = '"+registNo+"' and stringTimeStamp = '"+timeStamp+"' ";
		BLPlantingsettlelisttempFacade blPlantingSettleListTempFacade = new BLPlantingsettlelisttempFacade();
		blPlantingSettleListTempFacade.deleteByConditions(sqlCondition);
	}
	private String generateTimeStamp(){
		String timeStamp = "";
		Date currentTime = new Date();
		timeStamp=new SimpleDateFormat("yyMMddHHmmss").format(currentTime);
		return timeStamp;
	}	
//	private String checkNumber(String string){
//		String result = "";
//		^[0-9]*$
//		return result;
//	}
	
	private Map loadExcelDataByNewTemplate(HttpServletRequest request,String rootPath,LoadForm loadForm){
		try{
			Map saveMap=null;
				
			InputStream in=null;
			String savePath=rootPath;
			FormFile formFile = loadForm.getFormFile();
			String fileName=savePath+"\\"+formFile.getFileName();
				
			in =formFile.getInputStream();
			saveMap = checkAndLoadSettleExcelByNewTemplate(request,in);
			in.close();
			return saveMap;
		}catch (Exception e){
			System.out.println(e);
			return null;
		}
	}
	
	private Map checkAndLoadSettleExcelByNewTemplate(HttpServletRequest request, InputStream in){
		Workbook workbook=null;
		/**
		 * resultMap 包含两个参数： List plantingSettleListDtoList 理赔清单子表信息。
		 * 						 StringBuffer errorMessage 出错信息，用于页面显示。
		 */
		Map resultMap = new HashMap();
		String settleListCode = request.getParameter("settleListCode");
		String insureListCode = request.getParameter("insureListCode");
		String policyNo = request.getParameter("policyNo");
		String nodeType = request.getParameter("nodeType");
		String registNo = request.getParameter("registNo");
		String riskCode = request.getParameter("riskCode");
		String classCode = request.getParameter("classCode");
		String compensateNo = request.getParameter("compensateNo");

		double lowerLimitOfPartialLoss = 0.0;
		try{
			workbook=Workbook.getWorkbook(in);
			Sheet sheet=workbook.getSheet(0);
			
			boolean isReopen = isReopenCase(registNo, policyNo,nodeType,compensateNo);
			List reopenSettleCodeList = new ArrayList();
			if(isReopen)
				reopenSettleCodeList = getAllReopenSettleCodeList(registNo, policyNo,compensateNo);
			List plantingSettleListDtoList = new ArrayList();
			List plantingSettleListTotalDtoList = new ArrayList();
			List reopenFcodeList = new ArrayList();
			StringBuffer errorMessage = new StringBuffer();
			
			String sqlCondition = "";
			PlantingsettlelistDto plantingSettleListDto = new PlantingsettlelistDto();
			PlantingsettlelistDto plantingSettleListTotalDto = new PlantingsettlelistDto();
			BLPlantingpolicylistFacade blPlantingPolicyListFacade = new BLPlantingpolicylistFacade();
			Collection collectionPlantingPolicyList = new ArrayList();
			Map kindCodeMap = new HashMap();
			Map claimRateMap = new HashMap();
			String enterSymbol = "<br/>";
			
			if ( null==riskCode || "".equals(riskCode)){
				errorMessage.append("险种 "+riskCode +"为空！"+enterSymbol);
				resultMap.put("errorMessage", errorMessage);
				return resultMap;
			}
			
			//
			//首先检查模板中是否存在kindCode，如果存在则将第一个农户(第六行)的kindCode作为整张单子的默认kindCode,查询保单信息
			//如果模板中不存在kindCode字段，则取保单中的kindCode作为默认kindCode
			String kindCode = "";
			List<String> fieldNameList = PlantingSettleExport.getTitleFieldNameListByRiskPolicyNo(riskCode,policyNo);
			if(null!=fieldNameList && fieldNameList.size()>1){
				boolean containKindCode = false;
				for(int indexFieldName = 0;indexFieldName < fieldNameList.size();indexFieldName++){
					if("KINDCODE".equals(fieldNameList.get(indexFieldName))){
						kindCode = sheet.getCell(indexFieldName, 5).getContents().trim();
						containKindCode = true;
						break;
					}
				}
				PrpCitemKindSchema prpCitemKindSchema ;
				if(containKindCode){
					if(null == kindCode || "".equals(kindCode)){
						errorMessage.append("第一行农户的险别信息错误！！"+enterSymbol);
						resultMap.put("errorMessage", errorMessage);
						return resultMap;
					}
					prpCitemKindSchema = getPrpCitemKindSchema(policyNo, riskCode, kindCode);
				}else{
					prpCitemKindSchema = getFirstPrpCitemKindSchema(policyNo);
					kindCode = prpCitemKindSchema.getKindCode();
					//3228和3224只赔主险
					if("3224".equals(riskCode))
					{
						kindCode = "001";
						prpCitemKindSchema = getPrpCitemKindSchema(policyNo, "3224", kindCode);
					}
					//else if("3228".equals(riskCode))
					//	kindCode = "3228001";
				}
			
				if(null==prpCitemKindSchema){
					errorMessage.append("没有找到保单为"+policyNo+"，险种为"+riskCode+"，险别为"+kindCode+"的标的子险信息。"+enterSymbol);
					resultMap.put("errorMessage", errorMessage);
					return resultMap;
				}
				String strDamageDate = getDamageDateByRegistNo(registNo);
				String strDamageHour = getDamageHourByRegistNo(registNo);
				//lowerLimitOfPartialLoss = 30;
				lowerLimitOfPartialLoss = getLowerLimitOfPartialLoss(riskCode);
				UserDto user = (UserDto)request.getSession().getAttribute("user");
				String opCode = user.getUserCode();
				if(0!=transformStringToDouble(prpCitemKindSchema.getTriggerPoint()))
					lowerLimitOfPartialLoss = transformStringToDouble(prpCitemKindSchema.getTriggerPoint());
				if("".equals(errorMessage.toString())){//进行Excel解析。
					for (int i = 5; i < sheet.getRows(); i++){//第6行开始读入
						
						plantingSettleListDto = new PlantingsettlelistDto();
						
						String fCode = "";
						String fPhone = "";
						String fKindCode = "";
						String strfClaimRate = "";
						String strfGrowingSeason = "";
						String strfSettleArea = "";
						String strfLostRate = "";
						String fRemark = "";
						String strWoodlandarea = "";
						//for 3228
						String fatarea = "";
						String flittlearea = "";
						boolean notNullCheck = true;
						for(int indexFieldName = 1; indexFieldName < fieldNameList.size(); indexFieldName ++){
							String fieldName = fieldNameList.get(indexFieldName);
							System.err.println(fieldName);
							//"INDEXOFSETTLE","FCODE","FNAME","FIDCARD","ZHIBUKA","PHONE","WARRANT","INSUREAREA","SUMINSURED",
							//"SETTLEAREA","LOSSRATE","SETTLESUM","REMARK","STRING"
							//if("3228".equals(riskCode)||"3224".equals(riskCode))
							if("3224".equals(riskCode))
							{
								if("FIDCARD".equals(fieldName)){
									fCode = sheet.getCell(indexFieldName, i).getContents().trim();
									//如果本行中的农户代码为空，本行数据作废。
									if (null == fCode ||("").equals(fCode))
										break;
								}else if("FNAME".equals(fieldName)){
								}else if("ZHIBUKA".equals(fieldName)){
								}else if("PHONE".equals(fieldName)){
									fPhone = sheet.getCell(indexFieldName, i).getContents().trim();
								}else if("WARRANT".equals(fieldName)){
								}else if("INSUREAREA".equals(fieldName)){
								}else if("SUMINSURED".equals(fieldName)){
								}else if("SETTLEAREA".equals(fieldName)){
									strfSettleArea = sheet.getCell(indexFieldName, i).getContents().trim();
									if(null == strfSettleArea || "".equals(strfSettleArea)){
										errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的受损面积为空！"+enterSymbol);
										notNullCheck = false;
										break;
									}
								}else if("LOSSRATE".equals(fieldName)){
									strfLostRate = sheet.getCell(indexFieldName, i).getContents().trim();
									if(null == strfLostRate || "".equals(strfLostRate)){
										errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的损失率为空！"+enterSymbol);
										notNullCheck = false;
										break;
									}
								}else if("SETTLESUM".equals(fieldName)){
								}else if("CLAIMRATE".equals(fieldName)){
									strfClaimRate = sheet.getCell(indexFieldName, i).getContents().trim();
									if(null == strfClaimRate || "".equals(strfClaimRate)){
										errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的赔付比例为空！"+enterSymbol);
										notNullCheck = false;
										break;
									}
								}else if("GROWINGSEASON".equals(fieldName)){
									strfGrowingSeason = sheet.getCell(indexFieldName, i).getContents().trim();
									if(null == strfGrowingSeason || "".equals(strfGrowingSeason)){
										errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的生长期比例为空！"+enterSymbol);
										notNullCheck = false;
										break;
									}
								}else if("KINDCODE".equals(fieldName)){
									fKindCode = sheet.getCell(indexFieldName, i).getContents().trim();
									if ( null==fKindCode || "".equals(fKindCode)){
										errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的险别 "+fKindCode +"为空！"+enterSymbol);
										break;
									}
								}
							}else
							{
								if("FCODE".equals(fieldName)){
									fCode = sheet.getCell(indexFieldName, i).getContents().trim();
									//如果本行中的农户代码为空，本行数据作废。
									if (null == fCode ||("").equals(fCode))
										break;
								}else if("FNAME".equals(fieldName)){
								}else if("FIDCARD".equals(fieldName)){
								}else if("ZHIBUKA".equals(fieldName)){
								}else if("PHONE".equals(fieldName)){
									fPhone = sheet.getCell(indexFieldName, i).getContents().trim();
								}else if("WARRANT".equals(fieldName)){
								}else if("INSUREAREA".equals(fieldName)){
								}else if("SUMINSURED".equals(fieldName)){
								}else if("SETTLEAREA".equals(fieldName)){
									strfSettleArea = sheet.getCell(indexFieldName, i).getContents().trim();
									if(null == strfSettleArea || "".equals(strfSettleArea)){
										errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的受损面积为空！"+enterSymbol);
										notNullCheck = false;
										break;
									}
								}else if("LOSSRATE".equals(fieldName)){
									strfLostRate = sheet.getCell(indexFieldName, i).getContents().trim();
									if(null == strfLostRate || "".equals(strfLostRate)){
										errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的损失率为空！"+enterSymbol);
										notNullCheck = false;
										break;
									}
								}else if("SETTLESUM".equals(fieldName)){
								}else if("CLAIMRATE".equals(fieldName)){
									strfClaimRate = sheet.getCell(indexFieldName, i).getContents().trim();
									if(null == strfClaimRate || "".equals(strfClaimRate)){
										errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的赔付比例为空！"+enterSymbol);
										notNullCheck = false;
										break;
									}
								}else if("GROWINGSEASON".equals(fieldName)){
									strfGrowingSeason = sheet.getCell(indexFieldName, i).getContents().trim();
									if(null == strfGrowingSeason || "".equals(strfGrowingSeason)){
										errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的生长期比例为空！"+enterSymbol);
										notNullCheck = false;
										break;
									}
								}else if("KINDCODE".equals(fieldName)){
									fKindCode = sheet.getCell(indexFieldName, i).getContents().trim();
									if ( null==fKindCode || "".equals(fKindCode)){
										errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的险别 "+fKindCode +"为空！"+enterSymbol);
										break;
									}
								}
							}
							// 3177 有 实有林地面积 校验
							if("3177".equals(riskCode)) {
								if("WOODLANDAREA".equals(fieldName)){
									strWoodlandarea = sheet.getCell(indexFieldName, i).getContents().trim();
									if ( null==strWoodlandarea || "".equals(strWoodlandarea)){
										errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的 实有林地面积 为空！"+enterSymbol);
										break;
									}
								}
							}
						}
						//如果本行中的农户代码为空，本行数据作废。
						if (null == fCode ||("").equals(fCode))
							continue;
						String coln = sheet.getCell(0, i).getContents().trim();
						if (("总计：").equals(coln) || ("总计").equals(coln) || ("合计：").equals(coln) || ("合计").equals(coln))
							continue;
						
						if ((("总计").equals(fCode)) || (("总计：").equals(fCode)) || (("农户代码").equals(fCode))|| ("合计：").equals(fCode) || ("合计").equals(fCode))
							continue;
						
						//如果必填字段的校验不通过，则绕过本行继续下一行
						if(!notNullCheck)
							continue;
						//对于清单中不含险别代码的险种，用保单中的先别代码赋值
						if(!containKindCode)
							fKindCode = kindCode;
									
						sqlCondition = " fcode like '"+fCode+"' and riskCode like '"+riskCode+"' and kindCode like '"+fKindCode+"' and inusreListCode like '"+insureListCode+"' and validity like '1' ";
					
						//if(riskCode.equals("3228")||riskCode.equals("3224"))
						if(riskCode.equals("3224"))
						{
							System.err.println("fKindCode:"+fKindCode);
							sqlCondition = " fidcard like '"+fCode+"'  and kindCode like '"+fKindCode+"' and inusreListCode like '"+insureListCode+"' and validity like '1' ";
							System.err.println(sqlCondition);
							Collection infoesTemp = new ArrayList();
							BLHerdpolicylistFacade blHerdpolicylistFacade = new BLHerdpolicylistFacade();
							infoesTemp = blHerdpolicylistFacade.findByConditions(sqlCondition);
							System.err.println(sqlCondition);
							Collection pageRecordHerdPolicyList = new ArrayList();
							Iterator it = infoesTemp.iterator();
							while(it.hasNext()){
				     			HerdpolicylistDto herdpolicylistDto = (HerdpolicylistDto)it.next();
				     			PlantingpolicylistDto herdtoplantingpolicylistDto = new PlantingpolicylistDto();
				     			//if(riskCode.equals("3228"))
				     			//	herdtoplantingpolicylistDto = blHerdpolicylistFacade.evaluateHerdToplanting(herdpolicylistDto, "3228");
				     			//else 
				     			if(riskCode.equals("3224"))
				     				herdtoplantingpolicylistDto = blHerdpolicylistFacade.evaluateHerdToplanting(herdpolicylistDto, "3224");
				     			pageRecordHerdPolicyList.add(herdtoplantingpolicylistDto);
							}
							collectionPlantingPolicyList = pageRecordHerdPolicyList;
						}else
						{
							collectionPlantingPolicyList = blPlantingPolicyListFacade.findByConditions(sqlCondition);
						}
						if(null==collectionPlantingPolicyList || collectionPlantingPolicyList.size()!=1){
							errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的险种 "+riskCode+" 或险别 "+fKindCode +" 在保单清单中对应的记录为空或者不唯一！"+enterSymbol);
						}else{
							PlantingpolicylistDto plantingPolicyListDto = (PlantingpolicylistDto)(collectionPlantingPolicyList.toArray()[0]);
							//从保单清单带入农户基本信息
							plantingSettleListDto = getBasicInfoFromPolicyList(plantingSettleListDto,plantingPolicyListDto,request);

							//给操作员代码和时间赋值
							DateTime dateTime = new DateTime(DateTime.current().toString(),DateTime.YEAR_TO_SECOND);
							plantingSettleListDto.setOpcode(opCode);
							plantingSettleListDto.setOptime(dateTime);
							boolean newTotalDto = false;
							kindCodeMap.put(fKindCode, fKindCode);
							
							plantingSettleListTotalDto = getDtoFromPlantingSettleListTotalDtoList(plantingSettleListTotalDtoList, plantingSettleListDto);
							if(null==plantingSettleListTotalDto.getFcode()||"".equals(plantingSettleListTotalDto.getFcode())){
								plantingSettleListTotalDto.setFcode(fCode);
								plantingSettleListTotalDto.setRiskcode(riskCode);
								plantingSettleListTotalDto.setKindcode(fKindCode);
								newTotalDto = true;
							}
							if(strWoodlandarea!= null && !strWoodlandarea.equals("")) {
								double woodlandArea = transformStringToDouble(strWoodlandarea);
								plantingSettleListDto.setWoodlandArea(woodlandArea);
							}
							
							
							//理赔面积不得小于规定最小亩数
							double settleArea = transformStringToDouble(strfSettleArea);
							settleArea = PlantingSettleExport.round(settleArea, 3);
							if(isReopen){
								if(Math.abs(settleArea)<lowerLimitOfSettleArea){
									errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的理赔面积小于"+lowerLimitOfSettleArea+"亩"+enterSymbol);
									continue;
								}
							}else{
								if(settleArea<lowerLimitOfSettleArea){
									errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的理赔面积小于"+lowerLimitOfSettleArea+"亩"+enterSymbol);
									continue;
								}
							}
							plantingSettleListDto.setSettlearea(settleArea);
							if(plantingSettleListTotalDto.getSettlearea()==0)
								plantingSettleListTotalDto.setSettlearea(settleArea);
							else plantingSettleListTotalDto.setSettlearea(plantingSettleListTotalDto.getSettlearea()+settleArea);
							
							//损失率必须在规定的损失范围内。
							double lossRate = transformStringToDouble(strfLostRate);
							lossRate = PlantingSettleExport.round(lossRate, 2);
							if(lowerLimitOfPartialLoss>lossRate){
								errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的损失率小于"+lowerLimitOfPartialLoss+enterSymbol);
								continue;
							}
							if(topLimitOfTotalLoss<lossRate){
								errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的损失率大于"+topLimitOfTotalLoss+enterSymbol);
								continue;
							}
							plantingSettleListDto.setLossrate(lossRate);
							
							//生长期比率必须在规定的范围内。
	//						double grownSeason = transformStringToDouble(strfGrowingSeason);
	//						if(topLimitOfGrownSeason<grownSeason || lowerLimitOfGrownSeason>=grownSeason){
	//							errorMessage += "第"+(i+1)+"行，农户"+fCode+"的生长期比率必须在"+lowerLimitOfGrownSeason+"到"+topLimitOfGrownSeason+"之间！"+enterSymbol;
	//							continue;
	//						}
	//						plantingSettleListDto.setGrowingseason(grownSeason);
							
							//赔付比例必须在规定的范围内。
							double claimRate = transformStringToDouble(strfClaimRate);
							if("3149".equals(riskCode) ||"3177".equals(riskCode))
								claimRate = 1;
							claimRate = PlantingSettleExport.round(claimRate, 2);
							if(topLimitOfClaimRate<claimRate || lowerLimitOfClaimRate>=claimRate){
								errorMessage.append("第"+(i+1)+"行，农户"+fCode+"的赔付比率必须在"+lowerLimitOfClaimRate+"到"+topLimitOfClaimRate+"之间！"+enterSymbol);
								continue;
							}
							claimRateMap.put(claimRate, claimRate);
							plantingSettleListDto.setClaimrate(claimRate);
							
							//计算赔款金额
							//plantingPolicyListDto 应该替换成为出险时清单数据。
							double settleSum = calculateSettleSum(prpCitemKindSchema,settleArea,lossRate,claimRate,plantingPolicyListDto);
							settleSum = PlantingSettleExport.round(settleSum, 2);
							plantingSettleListDto.setSettlesum(String.valueOf(settleSum));
							if("0".equals(plantingSettleListTotalDto.getSettlesum())|| null==plantingSettleListTotalDto.getSettlesum()|| ""==plantingSettleListTotalDto.getSettlesum()){
								plantingSettleListTotalDto.setSettlesum(String.valueOf(settleSum));}
							else {
								//if(null!=plantingSettleListTotalDto.getSettlesum())
								double settlesum1=Double.parseDouble(plantingSettleListTotalDto.getSettlesum())+settleSum;

								plantingSettleListTotalDto.setSettlesum(String.valueOf(settlesum1));
							}
							
							//存入电话号码和备注。
							plantingSettleListDto.setPhone(fPhone);
							plantingSettleListDto.setRemark(fRemark);
							
							plantingSettleListDtoList.add(plantingSettleListDto);
							if(newTotalDto)
								plantingSettleListTotalDtoList.add(plantingSettleListTotalDto);
							
	
							//与保单最新清单进行总亩数和总金额的校验。
							checkSumAreaAndSumAmount(errorMessage,plantingSettleListTotalDto,plantingPolicyListDto,true,enterSymbol);
							//与出险时清单进行总亩数和总金额的校验。
	//						checkSumAreaAndSumAmount(errorMessage,plantingSettleListTotalDto,plantingPolicyListDto,false,enterSymbol);
							PlantingpolicylistDto damageDatePlantingPolicyListDto = getDamageDatePlantingPolicyListDto(plantingPolicyListDto, strDamageDate, strDamageHour, policyNo, kindCode, fCode, riskCode);
							checkSumAreaAndSumAmount(errorMessage,plantingSettleListTotalDto,damageDatePlantingPolicyListDto,false,enterSymbol);
							
							//对于案后重开的案件，如果理赔面积小于0，增加与本案之前的理赔清单的总金额和面积校验。
							if(isReopen){
								if(settleArea<0){
									errorMessage = checkReopenCaseSettleList(errorMessage,plantingSettleListTotalDto,reopenSettleCodeList,enterSymbol);
								}
							}
						}
					}
					errorMessage = checkKindCodeType(errorMessage,kindCodeMap);
					errorMessage = checkClaimRate(errorMessage,claimRateMap);
				}
			}
			resultMap.put("plantingSettleListDtoList", plantingSettleListDtoList);
			resultMap.put("errorMessage", errorMessage);
			workbook.close();
		}catch (BiffException e){
			e.printStackTrace();
		//	workbook.close();
			return null;
		}catch (IOException e){
			e.printStackTrace();
			return null;
		}catch (Exception e){
			e.printStackTrace();
			return null;
		}finally{
			if (workbook!=null)
				workbook.close();
		}
		return resultMap;
	}
	//根据保单号获取第一条标的子险信息。可为主险，也可为附加险。
	private PrpCitemKindSchema getFirstPrpCitemKindSchema(String policyNo){
		PrpCitemKindSchema prpCitemKindSchema = null;
		try {
			if(null!=policyNo && !"".equals(policyNo) ){
				BLPrpCitemKind blPrpCitemKind = new BLPrpCitemKind();
				blPrpCitemKind.getData(policyNo);
				if(null != blPrpCitemKind && blPrpCitemKind.getSize()>0){
					prpCitemKindSchema = blPrpCitemKind.getArr(0);
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return prpCitemKindSchema;
	}
	
	//根据数据分区存储需要，在获取保单信息时，需要根据保单的结束日期来判断在哪个分区中获取保单清单信息。
	private Collection getPlantingPolicyListByCondition(String sqlCondition, String policyNo){
		Collection plantingPolicyListCollection = new ArrayList();
		try {
			BLPrpCmain blPrpCmain = new BLPrpCmain();
			DateTime endTime = new DateTime();
			blPrpCmain.getData(policyNo);
			if(blPrpCmain.getSize()>0){
				PrpCmainSchema prpCmainSchema = blPrpCmain.getArr(0);
				if(null != prpCmainSchema){
					String strEndDate = prpCmainSchema.getEndDate();//数据格式 YYYY-MM-DD?
					String strEndHour = prpCmainSchema.getEndHour();//转储时是否考虑保险期间结束小时？？？？
					SimpleDateFormat dateFormat = new SimpleDateFormat("YYYY-MM-DD");
					Calendar calEndDate = Calendar.getInstance();
					Date endDate = dateFormat.parse(strEndDate);
					calEndDate.setTime(endDate);
					if(null != strEndHour){
						int intEndHour = Integer.parseInt(strEndHour);
						if(24==intEndHour){
							calEndDate.add(Calendar.DAY_OF_MONTH, 1);
						}else calEndDate.set(Calendar.HOUR_OF_DAY, intEndHour);
					}
					//根据当前日期计算最近的转储时间，从而判断去哪张表查询数据。
					Calendar calTransDate = Calendar.getInstance();
					calTransDate.set(calTransDate.get(Calendar.YEAR), calTransDate.get(Calendar.MONTH), calTransDate.get(Calendar.DAY_OF_MONTH), 0, 0, 0);
					if(calTransDate.before(calEndDate)){//保单未被转储，去表plantingPolicyList查询
						if(prpCmainSchema.getRiskCode().equals("3224"))
						//if(prpCmainSchema.getRiskCode().equals("3228")||prpCmainSchema.getRiskCode().equals("3224"))
						{
							Collection infoesTemp = new ArrayList();
							BLHerdpolicylistFacade blHerdpolicylistFacade = new BLHerdpolicylistFacade();
							infoesTemp = blHerdpolicylistFacade.findByConditions(sqlCondition);
							Collection pageRecordHerdPolicyList = new ArrayList();
							Iterator it = infoesTemp.iterator();
							while(it.hasNext()){
				     			HerdpolicylistDto herdpolicylistDto = (HerdpolicylistDto)it.next();
				     			PlantingpolicylistDto herdtoplantingpolicylistDto = new PlantingpolicylistDto();
				     			//if(prpCmainSchema.getRiskCode().equals("3228"))
				     			//	herdtoplantingpolicylistDto = blHerdpolicylistFacade.evaluateHerdToplanting(herdpolicylistDto, "3228");
				     			//else 
				     			if(prpCmainSchema.getRiskCode().equals("3224"))
				     				herdtoplantingpolicylistDto = blHerdpolicylistFacade.evaluateHerdToplanting(herdpolicylistDto, "3224");
				     			pageRecordHerdPolicyList.add(herdtoplantingpolicylistDto);
							}
							plantingPolicyListCollection = pageRecordHerdPolicyList;
						}
						BLPlantingpolicylistFacade blPlantingPolicyListFacade = new BLPlantingpolicylistFacade();
						plantingPolicyListCollection = blPlantingPolicyListFacade.findByConditions(sqlCondition);
					}else{//保单已经被转储，去转储表查询
						
					}
				}
			}
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return plantingPolicyListCollection;
	}
	
	public double getLowerLimitOfPartialLoss(String riskcode){
		//if ("3145".equals(riskcode)||"3228".equals(riskcode)||"3224".equals(riskcode)||"3179".equals(riskcode)){
		if ("3145".equals(riskcode)||"3224".equals(riskcode)||"3179".equals(riskcode)||"3181".equals(riskcode)||"31A6".equals(riskcode)){
			return 20;
		}else if("3165".equals(riskcode)||"3170".equals(riskcode)) {
			return 0;
		} else{
			return 30;
		}
	}
	public boolean checkRiskVersion(String configCode,String riskCode,String policyNo) 
	{
		UIConfigAction uiConfigAction = new UIConfigAction();
		DateTime versionDate = new DateTime();
		DateTime underWriteDate = new DateTime();
		try {
			versionDate = new DateTime(uiConfigAction.getConfigValue(configCode,riskCode));
			BLPrpCmain blPrpCmain= new BLPrpCmain();
			PrpCmainSchema prpCmainSchema = new PrpCmainSchema();
			blPrpCmain.getData(policyNo);
			if(blPrpCmain.getSize() == 1){
				prpCmainSchema = blPrpCmain.getArr(0);
			}DateTime oldDate = new DateTime("2014-01-01");
			underWriteDate = new DateTime(prpCmainSchema.getUnderWriteEndDate());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if(underWriteDate.before(versionDate))
		{
			return true;
		}
		else
		{
			return false;
		}
		
	}
}