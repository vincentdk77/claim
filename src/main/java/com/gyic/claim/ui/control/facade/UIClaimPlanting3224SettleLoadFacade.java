/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gyic.claim.ui.control.facade;

import  jxl.*;

import java.io.*;

import  jxl.read.biff.BiffException;
import org.apache.struts.upload.FormFile;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.math.BigDecimal;

import javax.servlet.http.HttpServletRequest;
import org.apache.struts.action.Action;


import com.gyic.claim.bl.action.domain.BLPlanting31SettleListTempAction;
import com.gyic.claim.bl.action.domain.BLNyxsettlelisttempAction;
import com.gyic.claim.bl.facade.BLPlanting31PolicyListFacade;
import com.gyic.claim.bl.facade.BLPlanting31SettleListFacade;
import com.gyic.claim.bl.facade.BLPlanting31SettleListTempFacade;
import com.gyic.claim.bl.facade.*;
import com.gyic.claim.bl.facade.BLSettlemainlistFacade;
import com.gyic.claim.dto.domain.Planting31PolicyListDto;
import com.gyic.claim.dto.domain.Planting31SettleListDto;
import com.gyic.claim.dto.domain.Planting31SettleListTempDto;
import com.gyic.claim.dto.domain.*;
import com.gyic.claim.dto.domain.SettlemainlistDto;
import com.gyic.claim.utils.LoadForm;
import com.gyic.claim.utils.PlantingSettleExport;
import com.gyic.claim.utils.NyxSettleExport;
import com.gyic.claim.utils.Utils;
import com.sinosoft.claim.bl.facade.BLPrpCitemKindAgriFacade;
import com.sinosoft.claim.bl.facade.BLPrpLclaimFacade;
import com.sinosoft.claim.bl.facade.BLPrpLcompensateFacade;
import com.sinosoft.claim.bl.facade.BLPrpLregistFacade;
import com.sinosoft.claim.dto.custom.UserDto;
import com.sinosoft.claim.dto.domain.PrpCitemKindAgriDto;
import com.sinosoft.claim.dto.domain.PrpLclaimDto;
import com.sinosoft.claim.dto.domain.PrpLcompensateDto;
import com.sinosoft.claim.dto.domain.PrpLregistDto;
import com.sinosoft.claim.ui.control.viewHelper.EndorseViewHelper;
import com.sinosoft.prpall.blsvr.cb.BLPrpCitemKind;
import com.sinosoft.prpall.blsvr.lp.BLPrpLcompensate;
import com.sinosoft.prpall.schema.PrpCitemKindSchema;
import com.sinosoft.sysframework.common.datatype.DateTime;
import com.sinosoft.sysframework.reference.DBManager;
import com.sinosoft.utiall.blsvr.BLPrpDkind;
import com.sinosoft.utility.SysConfig;
import com.sinosoft.utility.error.UserException;

/** 
 * MyEclipse Struts
 * Creation date: 10-23-2009
 * 
 * XDoclet definition:
 * @struts.action path="/loadAction" name="loadForm" scope="request" validate="true"
 * @struts.action-forward name="importBasicInfo" path="/importBasicInfo.jsp"
 */

public class UIClaimPlanting3224SettleLoadFacade extends Action {

	static double topLimitOfGrownSeason = 1.00;
	static double lowerLimitOfGrownSeason = 0;
	static double lowerLimitOfSettleArea = 0.0;
	static double topLimitOfTotalLoss = 100;
	static double topLimitOfClaimRate = 100;
	static double lowerLimitOfClaimRate = 0;
	Utils utils=new Utils();
	public String plantingLoadAct(HttpServletRequest request,String rootPath,LoadForm loadForm)
		throws Exception {
		try {
			request.setAttribute("loadXLS", "loadXLS");
	    	request.setAttribute("insureListCode", request.getParameter("insureListCode"));
	    	request.setAttribute("settleListCode", request.getParameter("settleListCode"));
	    	request.setAttribute("policyNo", request.getParameter("policyNo"));
	    	request.setAttribute("nodeType", request.getParameter("nodeType"));
	    	request.setAttribute("registNo", request.getParameter("registNo"));
	    	request.setAttribute("claimNo", request.getParameter("claimNo"));
	    	request.setAttribute("riskCode", request.getParameter("riskCode"));
	    	request.setAttribute("classCode", request.getParameter("classCode"));
	    	request.setAttribute("registNo", request.getParameter("registNo"));
	    	request.setAttribute("editType", request.getParameter("editType"));
	    	request.setAttribute("compensateNo", request.getParameter("compensateNo"));
	    	request.setAttribute("timeStamp", request.getParameter("timeStamp"));
            utils.getPhisicaMemory("校验理赔清单并保存临时表开始-----start");
			Boolean bRes=loadSettleInfo(request,rootPath,loadForm);
			utils.getPhisicaMemory("校验理赔清单并保存临时表结束-----end");
			if (bRes){
				request.setAttribute("opType", "loadXLS");
				return ("success");
			}else{
				return ("message");
			}
		}catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
	}



	private Boolean loadSettleInfo(HttpServletRequest request,String rootPath, LoadForm loadForm)throws Exception{
		try{
			Map excelMap=loadExcelData(request,rootPath,loadForm);
			
			if ((excelMap==null) || (excelMap.size()==0))
				return false;
			
			StringBuffer errorMessage = (StringBuffer)excelMap.get("errorMessage");
			if(null!=errorMessage && !"".equals(errorMessage.toString())){
				request.setAttribute("errorMessage", errorMessage);
				return false;
			}
			else{
				List planting31SettleList = (List)excelMap.get("plantingSettleListDtoList");
				String registNo = request.getParameter("registNo");
				String timeStamp = request.getParameter("timeStamp");
				if(null!=registNo && !"".equals(registNo)){
					deletePreviousTempData(registNo,timeStamp);//在保存之前先清空当前报案的临时表数据。
					boolean saveResult = saveToTempTable(planting31SettleList,registNo,request);//将数据保存到临时表中,并将时间戳放到request中。
					if(!saveResult){
						request.setAttribute("errorMessage", "暂存理赔清单失败！！");
						return false;
					}
				}
			}			
		}catch (Exception e){
			e.printStackTrace();
			return false;
		}	
		return true;
	}

	private Map loadExcelData(HttpServletRequest request,String rootPath,LoadForm loadForm)throws Exception{
		try{
			Map saveMap=null;
				
			InputStream in=null;
			String savePath=rootPath;
			FormFile formFile = loadForm.getFormFile();
			String fileName=savePath+"\\"+formFile.getFileName();
				
			in =formFile.getInputStream();
			saveMap = checkAndLoadSettleExcel(request,in);
			in.close();
			return saveMap;
		}catch (Exception e){
			System.out.println(e);
			return null;
		}
	}

	private Map checkAndLoadSettleExcel(HttpServletRequest request, InputStream in)throws Exception{
		Workbook workbook=null;
		/**
		 * resultMap 包含两个参数： List plantingSettleListDtoList 理赔清单子表信息。
		 * 						 StringBuffer errorMessage 出错信息，用于页面显示。
		 */
		Map resultMap = new HashMap();
		String settleListCode = request.getParameter("settleListCode");
		String insureListCode = request.getParameter("insureListCode");
		String policyNo = request.getParameter("policyNo");
		String nodeType = request.getParameter("nodeType");
		String registNo = request.getParameter("registNo");
		String riskCode = request.getParameter("riskCode");
		String classCode = request.getParameter("classCode");
		String compensateNo = request.getParameter("compensateNo");
		String planting31FarmerListFlag = SysConfig.getProperty("PLNATING_31_FARMER_LIST_FLAG","claim");

		double lowerLimitOfPartialLoss = 0.0;
		try{
			workbook=Workbook.getWorkbook(in);
			Sheet sheet=workbook.getSheet(0);
			
			boolean isReopen = isReopenCase(registNo, policyNo,nodeType,compensateNo);
			List reopenSettleCodeList = new ArrayList();
			if(isReopen)
				reopenSettleCodeList = getAllReopenSettleCodeList(registNo, policyNo,compensateNo);
			List planting31SettleListDtoList = new ArrayList();
			List planting31SettleListTotalDtoList = new ArrayList();
			List planting31SettleListTotalDtoList2 = new ArrayList();
			List reopenFcodeList = new ArrayList();
			StringBuffer errorMessage = new StringBuffer();
			
			String sqlCondition = "";
			
			NyxsettlelistDto nyxsettlelistDto = new NyxsettlelistDto();
			NyxsettlelistDto nyxSettleListTotalDto = new NyxsettlelistDto();
			NyxsettlelistDto nyxSettleListTotalDto2 = new NyxsettlelistDto();
			BLNyxpolicylistFacade blNyxpolicylistFacade = new BLNyxpolicylistFacade();
			Collection collectionPlanting31PolicyList = new ArrayList();
			Map kindCodeMap = new HashMap();
			Map claimRateMap = new HashMap();
			String enterSymbol = "<br/>";
			
			if ( null==riskCode || "".equals(riskCode)){
				errorMessage.append("险种 "+riskCode +"为空！"+enterSymbol);
				resultMap.put("errorMessage", errorMessage);
				return resultMap;
			}
			
			
			String strDamageDate = getDamageDateByRegistNo(registNo);
			String strDamageHour = getDamageHourByRegistNo(registNo);
			UserDto user = (UserDto)request.getSession().getAttribute("user");
			String opCode = user.getUserCode();
			Map fCodeMap = new HashMap();
			String sqlCon2 = "";
			NyxpolicylistDto mainDto;
			DateTime dateTime = new DateTime(DateTime.current().toString(),DateTime.YEAR_TO_SECOND);
			if("".equals(errorMessage.toString())){//进行Excel解析。
				for (int i = 5; i < sheet.getRows(); i++){//第6行开始读入
					lowerLimitOfPartialLoss = 0;
					nyxsettlelistDto = new NyxsettlelistDto();
					int j=3;
					String fIdCard = sheet.getCell(j, i).getContents().trim();
					j+=2;
					String fPhone = sheet.getCell(j, i).getContents().trim();
					j++;
					String fKindCode = sheet.getCell(j, i).getContents().trim();
					j++;
					String fItemCode = sheet.getCell(j, i).getContents().trim();
					j+=3;
					String strfSettleArea = sheet.getCell(j, i).getContents().trim();
					j++;
					String strfClaimRate = sheet.getCell(j, i).getContents().trim();
					j++;
					String strfLostRate = sheet.getCell(j, i).getContents().trim();
					j +=4;
					String fRemark = sheet.getCell(j, i).getContents().trim();
					
					String coln = sheet.getCell(0, i).getContents().trim();
					if (("总计：").equals(coln) || ("总计").equals(coln) || ("合计：").equals(coln) || ("合计").equals(coln))
						continue;
					
					if ((("总计").equals(fIdCard)) || (("总计：").equals(fIdCard)) || (("农户代码").equals(fIdCard))|| ("合计：").equals(fIdCard) || ("合计").equals(fIdCard))
						continue;
					
					if (("").equals(fIdCard))
						continue;
					
					if ( null==fKindCode || "".equals(fKindCode)){
						errorMessage.append("第"+(i+1)+"行，农户"+fIdCard+"的险别 "+fKindCode +"为空！"+enterSymbol);
						continue;
					}
					
					if ( null==fItemCode || "".equals(fItemCode)){
						errorMessage.append("第"+(i+1)+"行，农户"+fIdCard+"的标的 "+fItemCode +"为空！"+enterSymbol);
						continue;
					}
					
					if(null == strfClaimRate || "".equals(strfClaimRate)){
						errorMessage.append("第"+(i+1)+"行，农户"+fIdCard+"的赔付比例为空！"+enterSymbol);
						continue;
					}
					
					if(null == strfSettleArea || "".equals(strfSettleArea)){
						errorMessage.append("第"+(i+1)+"行，农户"+fIdCard+"的受损面积为空！"+enterSymbol);
						continue;
					}
					
					if(null == strfLostRate || "".equals(strfLostRate)){
						errorMessage.append("第"+(i+1)+"行，农户"+fIdCard+"的损失率为空！"+enterSymbol);
						continue;
					}
					
					//判断核心系统中该险种该险别该标的的保险信息。
					PrpCitemKindSchema prpCitemKindSchema = getPrpCitemKindSchema(policyNo, riskCode, fKindCode, fItemCode);
					if(null==prpCitemKindSchema){
						errorMessage.append("没有找到保单为"+policyNo+"，险种为"+riskCode+"，险别为"+fKindCode+"，标的为"+fItemCode+"的标的子险信息。"+enterSymbol);
						resultMap.put("errorMessage", errorMessage);
						continue;
					}
					//找到相应的保险信息后更新起赔点。
					if(0!=getTriggerPoint(prpCitemKindSchema))
						lowerLimitOfPartialLoss = getTriggerPoint(prpCitemKindSchema);
					
					sqlCondition = " BUSINESSNO = '"+fIdCard+"' and riskCode = '"+riskCode+"' and kindCode = '"+fKindCode+"' and inusreListCode = '"+insureListCode+"' and validity = '1' and itemCode ='"+fItemCode+"'";
				
					
						sqlCon2 = " BUSINESSNO = '"+fIdCard+"' and riskCode = '"+riskCode+"' and kindCode = '001' and inusreListCode = '"+insureListCode+"' and validity = '1' and itemCode ='"+fItemCode+"'";
						
						Collection collectionPlantingPolicyList2 = blNyxpolicylistFacade.findByConditions(sqlCon2);
						if(collectionPlantingPolicyList2 != null &&collectionPlantingPolicyList2.size()>0)
						{
							mainDto = (NyxpolicylistDto)(collectionPlantingPolicyList2.toArray()[0]);
						}
						else
						{
							mainDto = new NyxpolicylistDto();
						}
						
					//yx
						if("3201,3204,3238,3232,3215,3219,3221,3226,3229,3230,3231,3222,3102,3105,3124,3125,3127,3159,3139,3167,3160,3128,3130,3131,3133,3134,3135,3136,3137,3138,3171,3173,3175,3189,3183,3180,3192,3196,3228,3168,3169".indexOf(riskCode) > -1){
							String sqlCondition1 = " BUSINESSNO = '"+fIdCard+"' and riskCode = '"+riskCode+"' and kindCode = '"+fKindCode+"' and inusreListCode = '"+insureListCode+"' and validity = '1' and itemCode ='"+fItemCode+"'and calculateflag like 'Y'";
							Collection collectionPlanting31PolicyList1 = new ArrayList();
                            collectionPlanting31PolicyList1 = blNyxpolicylistFacade.findByConditions(sqlCondition1);
                            if(null==collectionPlanting31PolicyList1 || collectionPlanting31PolicyList1.size()!=1){
        						errorMessage.append("第"+(i+1)+"行，农户"+fIdCard+"的险种 "+riskCode+"  险别 "+fKindCode +" 标的 "+fItemCode+" 只能从主险险别001中赔付！"+enterSymbol);
        						continue;
        					}
						}
					collectionPlanting31PolicyList = blNyxpolicylistFacade.findByConditions(sqlCondition);
					//System.err.println("sqlCondition:"+sqlCondition);
					if(null==collectionPlanting31PolicyList || collectionPlanting31PolicyList.size()!=1){
						errorMessage.append("第"+(i+1)+"行，农户"+fIdCard+"的险种 "+riskCode+"  险别 "+fKindCode +" 标的 "+fItemCode+" 在保单清单中对应的记录为空或者不唯一！"+enterSymbol);
					}else{
						NyxpolicylistDto planting31PolicyListDto = (NyxpolicylistDto)(collectionPlanting31PolicyList.toArray()[0]);
						//从保单清单带入农户基本信息
						nyxsettlelistDto = getBasicInfoFromPolicyList(nyxsettlelistDto,planting31PolicyListDto,request);
						
						boolean newTotalDto = false;
						boolean newTotalDto2 = false;
						nyxsettlelistDto.setFidcard(fIdCard);
						nyxsettlelistDto.setRiskcode(riskCode);
						nyxsettlelistDto.setKindcode(fKindCode);
						nyxsettlelistDto.setOpcode(opCode);
						nyxsettlelistDto.setOptime(dateTime);
						nyxsettlelistDto.setItemcode(fItemCode);
						kindCodeMap.put(fKindCode, fKindCode);
						
						nyxSettleListTotalDto = getDtoFromPlanting31SettleListTotalDtoList(planting31SettleListTotalDtoList, nyxsettlelistDto);
						nyxSettleListTotalDto2 = getDtoFromPlanting31SettleListTotalDtoList2(planting31SettleListTotalDtoList2, nyxsettlelistDto);
						if(null==nyxSettleListTotalDto.getFidcard()||"".equals(nyxSettleListTotalDto.getFidcard())){
							nyxSettleListTotalDto.setFidcard(fIdCard);
							nyxSettleListTotalDto.setRiskcode(riskCode);
							nyxSettleListTotalDto.setKindcode(fKindCode);
							nyxSettleListTotalDto.setItemcode(fItemCode);
							newTotalDto = true;
						}
						
						if(null==nyxSettleListTotalDto2.getFidcard()||"".equals(nyxSettleListTotalDto2.getFidcard())){
							nyxSettleListTotalDto2.setFidcard(fIdCard);
							newTotalDto2 = true;
						}
						
						//理赔面积不得小于规定最小亩数
						double settleArea = transformStringToDouble(strfSettleArea);
						settleArea = PlantingSettleExport.round(settleArea, 3);
						if(isReopen){
							if(Math.abs(settleArea)<lowerLimitOfSettleArea){
								errorMessage.append("第"+(i+1)+"行，农户"+fIdCard+"的理赔面积小于"+lowerLimitOfSettleArea+"亩"+enterSymbol);
								continue;
							}
						}else{
							if(settleArea<lowerLimitOfSettleArea){
								errorMessage.append("第"+(i+1)+"行，农户"+fIdCard+"的理赔面积小于"+lowerLimitOfSettleArea+"亩"+enterSymbol);
								continue;
							}
						}
						nyxsettlelistDto.setSettlearea(settleArea);
						if(nyxSettleListTotalDto.getSettlearea()==0)
							nyxSettleListTotalDto.setSettlearea(settleArea);
						else nyxSettleListTotalDto.setSettlearea(nyxSettleListTotalDto.getSettlearea()+settleArea);
						nyxSettleListTotalDto2.setSettlearea(0);
						//损失率必须在规定的损失范围内。
						double lossRate = transformStringToDouble(strfLostRate);
						lossRate = PlantingSettleExport.round(lossRate, 2);
						if(lowerLimitOfPartialLoss>lossRate){
							errorMessage.append("第"+(i+1)+"行，农户"+fIdCard+"的损失率小于"+lowerLimitOfPartialLoss+enterSymbol);
							continue;
						}
						if(topLimitOfTotalLoss<lossRate){
							errorMessage.append("第"+(i+1)+"行，农户"+fIdCard+"的损失率大于"+topLimitOfTotalLoss+enterSymbol);
							continue;
						}
						nyxsettlelistDto.setLossrate(lossRate);
						
						
						//赔付比例必须在规定的范围内。
						double claimRate = transformStringToDouble(strfClaimRate);
						claimRate = PlantingSettleExport.round(claimRate, 2);
						claimRate = claimRate;
						if(topLimitOfClaimRate<claimRate || lowerLimitOfClaimRate>=claimRate){
							errorMessage.append("第"+(i+1)+"行，农户"+fIdCard+"的赔付比率必须在"+lowerLimitOfClaimRate+"到"+topLimitOfClaimRate+"之间！"+enterSymbol);
							continue;
						}
						claimRateMap.put(claimRate, claimRate);
						nyxsettlelistDto.setClaimrate(claimRate);
						
						//计算赔款金额
						//planting31PolicyListDto 应该替换成为出险时清单数据。
						double settleSum = calculateSettleSum(prpCitemKindSchema,settleArea,lossRate/100,claimRate/100,strDamageDate);
						if(settleSum == 0){
							errorMessage.append("第"+(i+1)+"行，农户"+fIdCard+"的赔款为0！"+enterSymbol);
							continue;
						}
						settleSum = PlantingSettleExport.round(settleSum, 2);
						nyxsettlelistDto.setSettlesum(settleSum);
						if(nyxSettleListTotalDto.getSettlesum()==0)
							nyxSettleListTotalDto.setSettlesum(settleSum);
						else nyxSettleListTotalDto.setSettlesum(nyxSettleListTotalDto.getSettlesum()+settleSum);
						
						if(nyxSettleListTotalDto2.getSettlesum()==0)
							nyxSettleListTotalDto2.setSettlesum(settleSum);
						else nyxSettleListTotalDto2.setSettlesum(nyxSettleListTotalDto2.getSettlesum()+settleSum);
						
						//存入电话号码和备注。
						nyxsettlelistDto.setPhone(fPhone);
						nyxsettlelistDto.setRemark(fRemark);
						
						planting31SettleListDtoList.add(nyxsettlelistDto);
						if(newTotalDto)
							planting31SettleListTotalDtoList.add(nyxSettleListTotalDto);
						if(newTotalDto2)
							planting31SettleListTotalDtoList2.add(nyxSettleListTotalDto2);
						
						

						//与保单最新清单进行总亩数和总金额的校验。
						checkSumAreaAndSumAmount(errorMessage,nyxSettleListTotalDto,planting31PolicyListDto,true,enterSymbol);
						if(!riskCode.equals("3173")&&!riskCode.equals("3229")&&!riskCode.equals("3189")&&!riskCode.equals("3183")&&!riskCode.equals("3180")&&!riskCode.equals("3228")&&!riskCode.equals("3130")&&!riskCode.equals("3163"))
							checkSumAreaAndSumAmount(errorMessage,nyxSettleListTotalDto2,mainDto,true,enterSymbol);
						//与出险时清单进行总亩数和总金额的校验。
						NyxpolicylistDto damageDatePlanting31PolicyListDto = getDamageDatePlanting31PolicyListDto(planting31PolicyListDto, strDamageDate, strDamageHour, policyNo, fKindCode, fIdCard, riskCode, fItemCode);
						NyxpolicylistDto damageDatePlanting31PolicyListDto2 = getDamageDatePlanting31PolicyListDto(mainDto, strDamageDate, strDamageHour, policyNo, fKindCode, fIdCard, riskCode, fItemCode);
						checkSumAreaAndSumAmount(errorMessage,nyxSettleListTotalDto,damageDatePlanting31PolicyListDto,false,enterSymbol);
						if(!riskCode.equals("3173")&&!riskCode.equals("3229")&&!riskCode.equals("3189")&&!riskCode.equals("3183")&&!riskCode.equals("3180")&&!riskCode.equals("3228")&&!riskCode.equals("3130")&&!riskCode.equals("3163"))
							checkSumAreaAndSumAmount(errorMessage,nyxSettleListTotalDto2,damageDatePlanting31PolicyListDto2,false,enterSymbol);
						
						//对于案后重开的案件，如果理赔面积小于0，增加与本案之前的理赔清单的总金额和面积校验。
						if(isReopen){
							if(settleArea<0){
								errorMessage = checkReopenCaseSettleList(errorMessage,nyxSettleListTotalDto,reopenSettleCodeList,enterSymbol);
							}
						}if(!fCodeMap.containsKey(""+fIdCard+fKindCode+fItemCode+claimRate+lossRate)){
							fCodeMap.put(""+fIdCard+fKindCode+fItemCode+claimRate+lossRate, ""+fIdCard+fKindCode+fItemCode+claimRate+lossRate);
						}else
							errorMessage.append("农户"+fIdCard+"的险种 "+riskCode+"  险别 "+fKindCode +" 标的 "+fItemCode+" 赔付比例 "+ claimRate +" 损失率 "+ lossRate+ " 的理赔记录不唯一！"+enterSymbol);
					}
					
				}
				errorMessage = checkKindCodeType(errorMessage,kindCodeMap);
				errorMessage = checkClaimRate(errorMessage,claimRateMap);
			}
			resultMap.put("plantingSettleListDtoList", planting31SettleListDtoList);
			resultMap.put("errorMessage", errorMessage);
			workbook.close();
		}catch (BiffException e){
			e.printStackTrace();
		//	workbook.close();
			return null;
		}catch (IOException e){
			e.printStackTrace();
			return null;
		}catch (Exception e){
			e.printStackTrace();
			return null;
		}finally{
			if (workbook!=null)
				workbook.close();
		}
		return resultMap;
	}

	public static String trimAllSpace(String str) {
		//return str == null ? str : str.replaceAll("^[\\s　]*|[\\s　]*$", "");  
		return str == null ? str : str.replaceAll("^[\\s　]*|，。？：；‘’！“”―……、|[\\s　]*$", "");  
	}
	private String getKindCodeByCName(String cName){
		String kindCode = "";
		String sqlCondition = " kindCName like '"+cName+"' ";
		BLPrpDkind blPrpDkind = new BLPrpDkind();
		try {
			blPrpDkind.query(sqlCondition);
			if(1==blPrpDkind.getSize())
				kindCode = blPrpDkind.getArr(0).getKindCode();
			else throw new Exception("无法找到 "+cName+" 对应的险别代码，请检查！");
		} catch (UserException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return kindCode;
	}
	//根据节点类型判断是否是理算环节，非理算环节不涉及到案后重开。如果是理算环节，再根据立案号和保单号查询理算书表，如果已经存在理算书，则表明现在是在做案后重开。
	private boolean isReopenCase(String registNo, String policyNo, String nodeType, String compensateNo){
		boolean isReopen = false;
		if(UIClaimGetSettleListFacade.nodeList[2].equals(nodeType)){
			BLPrpLcompensate blPrpLcompensate = new BLPrpLcompensate();
			BLPrpLclaimFacade blPrpLclaimFacade = new BLPrpLclaimFacade();
			String sqlClaimCondition = " registNo like '"+registNo +"' and policyNo like '"+policyNo+"' ";
			try {
				Collection collectionPrpLclaim = blPrpLclaimFacade.findByConditions(sqlClaimCondition);
				if(null != collectionPrpLclaim && collectionPrpLclaim.size()==1){
					String claimNo = ((PrpLclaimDto)collectionPrpLclaim.toArray()[0]).getClaimNo();
					BLPrpLcompensateFacade blPrpLcompensateFacade = new BLPrpLcompensateFacade();
					String sqlCondition = " claimNo like '"+claimNo +"' and policyNo like '"+policyNo+"' ";
					if(null!=compensateNo && !"".equals(compensateNo))
						sqlCondition += " and compensateNo not like '"+compensateNo+"' ";
					blPrpLcompensate.query(sqlCondition);
					if( blPrpLcompensate.getSize()>0)
						isReopen = true;
				}
			} catch (UserException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return isReopen;
	}
	//将字符串型数据转化证浮点型数据。
	private double transformStringToDouble(String stringValue){
		double doubleValue = 0.0;
		if(null!=stringValue && !"".equals(stringValue)){
			stringValue = trimAllSpace(stringValue);
			doubleValue = Double.parseDouble(stringValue);
		}
		return doubleValue;
	}
	//将部分不能从excel导入的基本信息，从保单清单数据中转储到理赔清单中。
	private NyxsettlelistDto getBasicInfoFromPolicyList(NyxsettlelistDto planting31SettleListDto, NyxpolicylistDto planting31PolicyListDto,HttpServletRequest httpServletRequest){
		planting31SettleListDto.setFname(planting31PolicyListDto.getFname());
		planting31SettleListDto.setFcode(planting31PolicyListDto.getFcode());
		planting31SettleListDto.setZhibuka(planting31PolicyListDto.getBankcard());
		planting31SettleListDto.setFareacode(planting31PolicyListDto.getFareacode());
		planting31SettleListDto.setBank(planting31PolicyListDto.getBank());
		planting31SettleListDto.setInusrelistcode(planting31PolicyListDto.getInusrelistcode());
		planting31SettleListDto.setClasscode(planting31PolicyListDto.getClasscode());
		planting31SettleListDto.setInsurearea(planting31PolicyListDto.getAreanumber());
		planting31SettleListDto.setSuminsured(planting31PolicyListDto.getSumamount());
		planting31SettleListDto.setFieldsource(planting31PolicyListDto.getFieldsource());
		planting31SettleListDto.setWarrant(planting31PolicyListDto.getWarrant());
		planting31SettleListDto.setLittleareaname(planting31PolicyListDto.getLitterarea());
		planting31SettleListDto.setAtarea(planting31PolicyListDto.getAtarea());
		planting31SettleListDto.setValidity("1");
		planting31SettleListDto.setNodetype(httpServletRequest.getParameter("nodeType"));
		return planting31SettleListDto;
	}
	//根据保单号，险种代码，险别代码获取一条标的子险信息。可为主险，也可为附加险。
	public PrpCitemKindSchema getPrpCitemKindSchema(String policyNo, String riskCode, String kindCode, String itemCode)throws Exception{
		PrpCitemKindSchema prpCitemKindSchema = null;
		try {
			if(null!=riskCode && !"".equals(riskCode) && null!=kindCode && !"".equals(kindCode)&& null!=itemCode && !"".equals(itemCode)){
				BLPrpCitemKind blPrpCitemKind = new BLPrpCitemKind();
				String sqlCondition = "policyNo = '"+policyNo+"' AND riskCode = '"+riskCode+"' AND kindCode = '"+kindCode+"' AND itemCode = '"+itemCode+"'";
				blPrpCitemKind.query(sqlCondition);
				if(null!=blPrpCitemKind && blPrpCitemKind.getSize()==1){
					PrpCitemKindSchema prpCitemKindSchemaTemp = blPrpCitemKind.getArr(0);
					prpCitemKindSchema = prpCitemKindSchemaTemp;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return prpCitemKindSchema;
	}
	//根据规则计算出赔偿金额。
	private double calculateSettleSum(PrpCitemKindSchema prpCitemKindSchema, double settleArea, double lossRate, double claimRate, String strDamageDate)throws Exception{
		double settleSum = 0.0;
		// 葡萄的处理需要区分省份,所以通过保单号来推算省份
		String province3173 = "";
		if(prpCitemKindSchema.getPolicyNo().startsWith("2317334")){
			province3173 = "AH";
		} else if(prpCitemKindSchema.getPolicyNo().startsWith("2317342")){
			province3173 = "HB";
		} else if(prpCitemKindSchema.getPolicyNo().startsWith("2317341")){
			province3173 = "HN";
		}
		double lowerLimitOfPartialLoss = getTriggerPoint(prpCitemKindSchema)/100;//起赔点
		double topLimitOfPartialLoss = getTotalLossRatePoint(prpCitemKindSchema)/100;//全损起点
		double deductibleRate = getDeductibleRate(prpCitemKindSchema)/100;//绝对免赔率
		double deductible = getDeductible(prpCitemKindSchema);//绝对免赔额
		//double franchiseDeductibleRate = getFranchiseDeductibleRate(prpCitemKindSchema);//相对免赔率
		double franchiseDeductble = 0.0;//相对免赔额
		
		double amount = 0.0;
		if(Double.parseDouble(prpCitemKindSchema.getUnitAmount()) > 0.0) {
			amount = transformStringToDouble(prpCitemKindSchema.getUnitAmount())*settleArea;//保额
		} else { // 解决3229安徽这种没有单位保额的情况,用总保额和总数量算一个单位保额出来
			double amountall = Double.parseDouble(prpCitemKindSchema.getAmount());
			double quantityall = Double.parseDouble(prpCitemKindSchema.getQuantity());
			amount = amountall/quantityall*settleArea;//保额
		}
		 
		if(prpCitemKindSchema.getPolicyNo().startsWith("23134") || prpCitemKindSchema.getPolicyNo().startsWith("23102")||prpCitemKindSchema.getPolicyNo().startsWith("23163"))
			amount = adjustAmount(prpCitemKindSchema, amount, strDamageDate);//部分险种标的需要对保额进行校正。
		
		if(prpCitemKindSchema.getPolicyNo().startsWith("23182"))
			amount = adjustAmountAll(prpCitemKindSchema, amount, strDamageDate);//部分险种保额需要对保额进行校正。
		//if(prpCitemKindSchema.getRiskCode().equals("3180")) {
		//	lowerLimitOfPartialLoss = 0.3;
		//	topLimitOfPartialLoss = 0.8;
		//	deductibleRate = 0.1;
		//}
		// 3173单独处理
		if(prpCitemKindSchema.getRiskCode().equals("3173")) {
			String itemcode = prpCitemKindSchema.getItemCode();
			// 标的为葡萄时的公式
			if(itemcode.equals("p001")) {
				if(province3173.equals("AH")) {
					lowerLimitOfPartialLoss = 0.2;
					topLimitOfPartialLoss = 0.8;
					deductibleRate = 0.1;
				}
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
					settleSum = amount*claimRate*lossRate*(1-deductibleRate);
				} else if(lossRate>=topLimitOfPartialLoss) {
					settleSum = amount*claimRate;
				}
			} else {
				// 标的为棚架棚膜时的公式
				if(province3173.equals("AH")) {
					lowerLimitOfPartialLoss = 0.0;
					topLimitOfPartialLoss = 100.0;
				}
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
					settleSum = amount * claimRate*lossRate;
				} else if(lossRate>=topLimitOfPartialLoss) {
					settleSum = amount * claimRate;
				}
				if(itemcode.equals("p011") || itemcode.equals("p013"))
					franchiseDeductble = 100.0; // 棚膜有100元的相对免赔额
				if(Math.abs(settleSum) < Math.abs(franchiseDeductble))//对赔偿金额和相对免赔额做比较，低于相对免赔额，则不赔。
					settleSum = 0;
			}
			
			if(province3173.equals("HN")) {
				// 果实
				if(itemcode.equals("4311")) {
					if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
						settleSum = amount * claimRate * lossRate * (1-deductibleRate);
					} else if(lossRate>=topLimitOfPartialLoss) {
						settleSum = amount * claimRate * (1-deductibleRate);
					}
				} else if (itemcode.equals("4312")) { // 植株
					if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
						settleSum = amount * claimRate * lossRate;
					} else if(lossRate>=topLimitOfPartialLoss) {
						settleSum = amount * claimRate;
					}
				}
			}
			
		} else if(prpCitemKindSchema.getRiskCode().equals("3130")) {
			String itemcode = prpCitemKindSchema.getItemCode();
			// 标的为草莓时的公式
			if(itemcode.equals("3181")) {
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
					settleSum = amount*claimRate*(lossRate-deductibleRate);
				} else if(lossRate>=topLimitOfPartialLoss) {
					settleSum = amount*claimRate * (1-deductibleRate);
				}
			} else {
				// 标的为棚架棚膜时的公式 但是这个险种没有做棚架和棚膜 = =  2017.10.23 现在做了棚架和棚膜了哦~~
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
					settleSum = amount * claimRate* (lossRate-deductibleRate);
				} else if(lossRate>=topLimitOfPartialLoss) {
					settleSum = amount * claimRate* (1-deductibleRate);
				}
			}
			
		} else if(prpCitemKindSchema.getRiskCode().equals("3232") || prpCitemKindSchema.getRiskCode().equals("3105")
				|| prpCitemKindSchema.getRiskCode().equals("3137")|| prpCitemKindSchema.getRiskCode().equals("3138")) {
			if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
				if(prpCitemKindSchema.getPolicyNo().startsWith("2310552"))
					settleSum = amount * claimRate * lossRate;  // 贵州没有免赔
				else settleSum = amount * claimRate * lossRate * (1-deductibleRate);
			} else if(lossRate>=topLimitOfPartialLoss) {
				settleSum = amount * claimRate;
			}
			//河南3137公式按照标的不同区分
			if(prpCitemKindSchema.getPolicyNo().startsWith("2313741")) {
				String itemcode = prpCitemKindSchema.getItemCode();
				if(itemcode.equals("4001")) {//水果
					if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
						settleSum = amount * claimRate * lossRate * (1-deductibleRate);
					} else if(lossRate>=topLimitOfPartialLoss) {
						settleSum = amount * claimRate * (1-deductibleRate);
					}
				} else if(itemcode.equals("4002")) {//果树
					if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
						settleSum = amount * claimRate * lossRate;
					} else if(lossRate>=topLimitOfPartialLoss) {
						settleSum = amount * claimRate;
					}
				}
			}
		} else if(prpCitemKindSchema.getRiskCode().equals("3127") || prpCitemKindSchema.getRiskCode().equals("3219")
				|| prpCitemKindSchema.getRiskCode().equals("3133")) {
			if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
				settleSum = amount * claimRate * lossRate * (1-deductibleRate);
			} else if(lossRate>=topLimitOfPartialLoss) {
				settleSum = amount * claimRate;
			}
		} else if(prpCitemKindSchema.getRiskCode().equals("3159")||prpCitemKindSchema.getRiskCode().equals("3139")||prpCitemKindSchema.getRiskCode().equals("3167")) {
			if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
				settleSum = amount * claimRate * lossRate;
			} else if(lossRate>=topLimitOfPartialLoss) {
				settleSum = amount * claimRate;
			}
		} else if(prpCitemKindSchema.getRiskCode().equals("3160")) {
			if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
				settleSum = amount * claimRate * lossRate;
			} else if(lossRate>=topLimitOfPartialLoss) {
				settleSum = amount * claimRate;
			}
		} else if(prpCitemKindSchema.getRiskCode().equals("3215") || prpCitemKindSchema.getRiskCode().equals("3230")
				|| prpCitemKindSchema.getRiskCode().equals("3222") || prpCitemKindSchema.getRiskCode().equals("3231")
				|| prpCitemKindSchema.getRiskCode().equals("3228")) {
			settleSum = amount * claimRate * lossRate * (1-deductibleRate);
		} else if("3201,3204,3229,3221,3226,3238".indexOf(prpCitemKindSchema.getRiskCode()) >-1) {
			settleSum = amount * claimRate * lossRate;
		} else if(prpCitemKindSchema.getRiskCode().equals("3235")) {
			if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
				settleSum = amount * claimRate * lossRate * (1-deductibleRate);
			} else if(lossRate>=topLimitOfPartialLoss) {
				settleSum = amount * claimRate;
			}
		} else if(prpCitemKindSchema.getRiskCode().equals("3134")) {
			if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
				settleSum = amount * claimRate * (lossRate-deductibleRate);
			} else if(lossRate>=topLimitOfPartialLoss) {
				settleSum = amount * claimRate * (1-deductibleRate);
			}
		} else if(prpCitemKindSchema.getRiskCode().equals("3102")) {
			if(prpCitemKindSchema.getPolicyNo().startsWith("2310252")) {
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
					settleSum = amount * claimRate * lossRate;
				} else if(lossRate>=topLimitOfPartialLoss) {
					settleSum = amount * claimRate;
				}
			} else {
				if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
					settleSum = amount * claimRate * (lossRate-deductibleRate);
				} else if(lossRate>=topLimitOfPartialLoss) {
					settleSum = amount * claimRate * (1-deductibleRate);
				}
			}
		} else if(prpCitemKindSchema.getRiskCode().equals("3189")) {
			if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
				settleSum = amount * claimRate * (lossRate-deductibleRate);
			} else if(lossRate>=topLimitOfPartialLoss) {
				settleSum = amount * claimRate;
			}
		} else if(prpCitemKindSchema.getRiskCode().equals("3183")) {
			if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
				settleSum = amount * claimRate * (lossRate-deductibleRate);
			} else if(lossRate>=topLimitOfPartialLoss) {
				settleSum = amount * claimRate;
			}
		} else if(prpCitemKindSchema.getRiskCode().equals("3180")) {
			if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
				settleSum = amount * claimRate *  lossRate * (1-deductibleRate);
			} else if(lossRate>=topLimitOfPartialLoss) {
				settleSum = amount * claimRate;
			}
		} else if(prpCitemKindSchema.getRiskCode().equals("3171")) {
			if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
				settleSum = amount * claimRate  * (lossRate-deductibleRate);
			} else if(lossRate>=topLimitOfPartialLoss) {
				settleSum = amount * claimRate;
			}
		} else if("3124,3125,3128,3131,3135,3136,3192,3196,3175,3163,3168,3169".indexOf(prpCitemKindSchema.getRiskCode()) >-1) {  // 通用公式(也可给一些赔款公式很复杂的险种使用)
			if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
				settleSum = amount * claimRate * lossRate;
			} else if(lossRate>=topLimitOfPartialLoss) {
				settleSum = amount * claimRate;
			}
		}else {
			if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
				//对于部分损失的（如30%<=损失率<80%）的按部分损失的公式计算：保额*赔付比例*损失率*(1-绝对免赔率)-绝对免赔额
					settleSum = amount*claimRate*lossRate*(1-deductibleRate)-deductible;
				}
				else if(lossRate>=topLimitOfPartialLoss)
				//对于全损（如损失率>=80%）的按全损公式计算：保额*赔付比例*(1-绝对免赔率)
					settleSum = amount*claimRate*(1-deductibleRate);

				if(Math.abs(settleSum) < Math.abs(franchiseDeductble))//对赔偿金额和相对免赔额做比较，低于相对免赔额，则不赔。
					settleSum = 0;
		}
		System.err.println("赔款金额是-----"+settleSum);
		return settleSum;
	}
	//获取起赔点
	public double getTriggerPoint(PrpCitemKindSchema prpCitemKindSchema){
		double triggerPoint = 0;
		String strRiskCode = prpCitemKindSchema.getRiskCode();
		String strTriggerPoint = prpCitemKindSchema.getTriggerPoint();
		if(null!=strRiskCode && !"".equals(strRiskCode) && null!=prpCitemKindSchema && !"".equals(prpCitemKindSchema)){
			if("3224".equals(strRiskCode) || "3173".equals(strRiskCode)|| "3232".equals(strRiskCode)|| "3235".equals(strRiskCode)){
				triggerPoint = transformStringToDouble(strTriggerPoint);
			}
			if("3171".equals(strRiskCode) || "3169".equals(strRiskCode)) {
				triggerPoint = transformStringToDouble(strTriggerPoint);
			}
			if("3105".equals(strRiskCode)||"3167".equals(strRiskCode)){
				triggerPoint = 10.0;
			}
			if("3137".equals(strRiskCode) || "3228".equals(strRiskCode)|| "3139".equals(strRiskCode)){
				triggerPoint = 20.0;
			}
			if("3138".equals(strRiskCode)  ||"3127".equals(strRiskCode)
					||"3133".equals(strRiskCode)||"3189".equals(strRiskCode)||"3183".equals(strRiskCode)||"3159".equals(strRiskCode)
					||"3219".equals(strRiskCode)||"3180".equals(strRiskCode)){
				triggerPoint = 30.0;
			}
			if("3173".equals(strRiskCode) && prpCitemKindSchema.getPolicyNo().startsWith("2317334")) {
				if(prpCitemKindSchema.getItemCode().equals("p001")) {
					triggerPoint = 20.0;
				} else {
					triggerPoint = 0.0;
				}
			}
			if("3125".equals(strRiskCode)) {
				if(prpCitemKindSchema.getPolicyNo().startsWith("2312534")) {
					triggerPoint = 10.0;
				} else if(prpCitemKindSchema.getPolicyNo().startsWith("2312541")) {
					triggerPoint = 30.0;
				}
			}
			if("3175".equals(strRiskCode) && prpCitemKindSchema.getPolicyNo().startsWith("2317552")) {
				triggerPoint = 20.0;
		    }
			if("3175".equals(strRiskCode) && prpCitemKindSchema.getPolicyNo().startsWith("2317534")) {
				triggerPoint = 30.0;
		    }
			if("3192".equals(strRiskCode)){
				triggerPoint = 40.0;
			}
			if(prpCitemKindSchema.getPolicyNo().startsWith("2313452")) {
				triggerPoint = 20.0;
			}
			if(prpCitemKindSchema.getPolicyNo().startsWith("2322442")) {
				triggerPoint = 20.0;
			}
			if(prpCitemKindSchema.getPolicyNo().startsWith("2310252")){
				triggerPoint = transformStringToDouble(strTriggerPoint);
			}
			if(prpCitemKindSchema.getPolicyNo().startsWith("2313741")){
				triggerPoint = transformStringToDouble(strTriggerPoint);
			}
			if(prpCitemKindSchema.getPolicyNo().startsWith("2317341")){
				triggerPoint = transformStringToDouble(strTriggerPoint);
			}	
		}
		return triggerPoint;
	}
	//获取相对免赔额
	public double getFranchiseDeductible(PrpCitemKindSchema prpCitemKindSchema){
		double franchiseDeductible = 0;
		String strRiskCode = prpCitemKindSchema.getRiskCode();
		if(null!=strRiskCode && !"".equals(strRiskCode) && null!=prpCitemKindSchema && !"".equals(prpCitemKindSchema)){
			if("3224".equals(strRiskCode)){
				//franchiseDeductible = transformStringToDouble(prpCitemKindSchema.getDeductibleRate());
			}
		}
		return franchiseDeductible;
	}
	//获取相对免赔率
	public double getFranchiseDeductibleRate(PrpCitemKindSchema prpCitemKindSchema){
		double franchiseDeductibleRate = 0;
		String strRiskCode = prpCitemKindSchema.getRiskCode();
		if(null!=strRiskCode && !"".equals(strRiskCode) && null!=prpCitemKindSchema && !"".equals(prpCitemKindSchema)){
			if("3141".equals(strRiskCode)||"3140".equals(strRiskCode)){
			}
		}
		return franchiseDeductibleRate;
	}
	//获取绝对免赔额
	public double getDeductible(PrpCitemKindSchema prpCitemKindSchema){
		double deductibleRelative = 0;
		String strRiskCode = prpCitemKindSchema.getRiskCode();
		if(null!=strRiskCode && !"".equals(strRiskCode) && null!=prpCitemKindSchema && !"".equals(prpCitemKindSchema)){
			if("3224".equals(strRiskCode)){
			}
		}
		return deductibleRelative;
	}
	//获取绝对免赔率
	public double getDeductibleRate(PrpCitemKindSchema prpCitemKindSchema){
		double deductibleRateRelative = 0;
		String strRiskCode = prpCitemKindSchema.getRiskCode();
		if(null!=strRiskCode && !"".equals(strRiskCode) && null!=prpCitemKindSchema && !"".equals(prpCitemKindSchema)){
			if("3224".equals(strRiskCode)){
				String strKindcode = prpCitemKindSchema.getKindCode();
				if(null!= strKindcode && "001".equals(strKindcode))
				{
					deductibleRateRelative = 30;
				}
				if(null!= strKindcode && "002".equals(strKindcode))
				{
					deductibleRateRelative = 20;
				}
				if(null!= strKindcode && "003".equals(strKindcode))
				{
					deductibleRateRelative = 30;
				}
					
			}
			if("3173".equals(strRiskCode) || "3235".equals(strRiskCode)){
				deductibleRateRelative = transformStringToDouble(prpCitemKindSchema.getDeductibleRate());
				if(prpCitemKindSchema.getPolicyNo().startsWith("2317334") && prpCitemKindSchema.getItemCode().equals("p001"))
					deductibleRateRelative = 10;
			}
			if("3232".equals(strRiskCode)){
				deductibleRateRelative = transformStringToDouble(prpCitemKindSchema.getDeductibleRate());
			}
			if("3171".equals(strRiskCode)) {
				deductibleRateRelative = transformStringToDouble(prpCitemKindSchema.getDeductibleRate());
			}
			// 3134 绝对免赔率 按照条款要求10%
			if("3134".equals(strRiskCode) || "3105".equals(strRiskCode) 
					|| "3127".equals(strRiskCode)|| "3124".equals(strRiskCode)|| "3125".equals(strRiskCode)
					|| "3137".equals(strRiskCode)|| "3222".equals(strRiskCode)|| "3231".equals(strRiskCode)
					|| "3189".equals(strRiskCode)|| "3180".equals(strRiskCode)){
				deductibleRateRelative = 10;
			}
			if("3102".equals(strRiskCode)) {
				if(prpCitemKindSchema.getPolicyNo().startsWith("2310252")) {
					deductibleRateRelative = transformStringToDouble(prpCitemKindSchema.getDeductibleRate());
				} else deductibleRateRelative = 10;
			}
			if("3130".equals(strRiskCode) || "3215".equals(strRiskCode)){
				deductibleRateRelative = 8;
			}
			if("3230".equals(strRiskCode)){
				deductibleRateRelative = 20;
			}
			if("3228".equals(strRiskCode)) {
				if(prpCitemKindSchema.getDeductibleRate() != null && !prpCitemKindSchema.getDeductibleRate().equals("")
						&& transformStringToDouble(prpCitemKindSchema.getDeductibleRate()) > 0.0) {
					deductibleRateRelative = transformStringToDouble(prpCitemKindSchema.getDeductibleRate());
				} else {
					deductibleRateRelative = 20;
				}
				
			}
			if("3182".equals(strRiskCode)) {
				if(prpCitemKindSchema.getDeductibleRate() != null && !prpCitemKindSchema.getDeductibleRate().equals("")
						&& transformStringToDouble(prpCitemKindSchema.getDeductibleRate()) > 0.0) {
					deductibleRateRelative = transformStringToDouble(prpCitemKindSchema.getDeductibleRate());
				}
				
			}
			if("3131".equals(strRiskCode) || "3133".equals(strRiskCode)|| "3138".equals(strRiskCode)|| "3219".equals(strRiskCode)){
				deductibleRateRelative = 15;
			}
			if(prpCitemKindSchema.getPolicyNo().startsWith("2313452")) {
				deductibleRateRelative = transformStringToDouble(prpCitemKindSchema.getDeductibleRate());
			}
			if(prpCitemKindSchema.getPolicyNo().startsWith("2313741")) {
				deductibleRateRelative = transformStringToDouble(prpCitemKindSchema.getDeductibleRate());
			}
			if(prpCitemKindSchema.getPolicyNo().startsWith("2317341")) {
				deductibleRateRelative = transformStringToDouble(prpCitemKindSchema.getDeductibleRate());
			}
		}
		return deductibleRateRelative;
	}
	//获取全损损失率起点
	public double getTotalLossRatePoint(PrpCitemKindSchema prpCitemKindSchema){
		double totalLossRatePoint = 100;
		String strRiskCode = prpCitemKindSchema.getRiskCode();
		if(null!=strRiskCode && !"".equals(strRiskCode) && null!=prpCitemKindSchema && !"".equals(prpCitemKindSchema) && null != prpCitemKindSchema.getTotalLossRatio() && !"".equals(prpCitemKindSchema.getTotalLossRatio())){
			totalLossRatePoint = transformStringToDouble(prpCitemKindSchema.getTotalLossRatio());
		}
		if(0==totalLossRatePoint)
			totalLossRatePoint = 100;
		if("3173".equals(strRiskCode) && prpCitemKindSchema.getPolicyNo().startsWith("2317334")) {
			if(prpCitemKindSchema.getItemCode().equals("p001")) {
				totalLossRatePoint = 80;
			} else {
				totalLossRatePoint = 100;
			}
		}
		// 3134 全损起点按照条款要求 是90%
		if("3134".equals(strRiskCode) || "3105".equals(strRiskCode) || "3130".equals(strRiskCode)
				|| "3137".equals(strRiskCode) || "3138".equals(strRiskCode) ) {
			totalLossRatePoint = 90;
		}
		if("3102".equals(strRiskCode)) {
			if(prpCitemKindSchema.getPolicyNo().startsWith("2310252")) {
				totalLossRatePoint = transformStringToDouble(prpCitemKindSchema.getTotalLossRatio());
			} else {
				totalLossRatePoint = 90;
			}
		}
		if("3127".equals(strRiskCode) || "3133".equals(strRiskCode)|| "3131".equals(strRiskCode)||"3159".equals(strRiskCode)
				||"3139".equals(strRiskCode)||"3167".equals(strRiskCode) ||"3189".equals(strRiskCode) ||"3183".equals(strRiskCode)||"3180".equals(strRiskCode)||"3219".equals(strRiskCode)) {
			totalLossRatePoint = 80;
		}
		if("3175".equals(strRiskCode) ) {

			totalLossRatePoint = 80;

		}
		if("3171".equals(strRiskCode) || "3169".equals(strRiskCode) ) {
			totalLossRatePoint = transformStringToDouble(prpCitemKindSchema.getTotalLossRatio());
		}
		if(prpCitemKindSchema.getPolicyNo().startsWith("2313452")) {
			totalLossRatePoint = transformStringToDouble(prpCitemKindSchema.getTotalLossRatio());
		}
		if(prpCitemKindSchema.getPolicyNo().startsWith("2313741")) {
			totalLossRatePoint = transformStringToDouble(prpCitemKindSchema.getTotalLossRatio());
		}
		if(prpCitemKindSchema.getPolicyNo().startsWith("2317341")) {
			totalLossRatePoint = transformStringToDouble(prpCitemKindSchema.getTotalLossRatio());
		}
		return totalLossRatePoint;
	}
	
	public double adjustAmount(PrpCitemKindSchema prpCitemKindSchema, double amount, String strDamageDate)throws Exception{
        //出险时间点精确到天,并且进行格式调整
        if(strDamageDate!=null&&strDamageDate.length()>9){
     	   strDamageDate = strDamageDate.substring(0,10);
        }
        String strRiskCode = prpCitemKindSchema.getRiskCode();
        if("3141".equals(strRiskCode)||"3140".equals(strRiskCode)){//大棚蔬菜B款 3141，在保险标的为蔬菜的情况下，按照茬次信息把保额按比例分配。
        	String strItemCode = prpCitemKindSchema.getItemCode();
        	if(null!=strItemCode && (strItemCode.indexOf("032")>-1 || strItemCode.equals("6330"))){//032 蔬菜作物
        		String policyNo = prpCitemKindSchema.getPolicyNo();
        		BLPrpCitemKindAgriFacade blPrpCitemKindAgriFacade = new BLPrpCitemKindAgriFacade();
        		String sqlCondition = " PolicyNo = '"+policyNo+"' And EndDate >= sinosoft_to_date('"+strDamageDate+"','yyyy-mm-dd') And StratDate <= sinosoft_to_date('"+strDamageDate+"','yyyy-mm-dd') And Times >0 ";
        		try {
					Collection collection = blPrpCitemKindAgriFacade.findByConditions(sqlCondition);//获取茬次信息
					if(null != collection && collection.size() == 1){
						PrpCitemKindAgriDto prpCitemKindAgriDto = (PrpCitemKindAgriDto)collection.toArray()[0];
						double distributingRate = prpCitemKindAgriDto.getDistributingRate()/100;
						amount = amount * distributingRate;
					}
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        	}
        }else if("3147".equals(strRiskCode)){//大棚蔬菜A款 3147，在保险标的为蔬菜的情况下，按照茬次信息把保额按比例分配。
        	String strItemCode = prpCitemKindSchema.getItemCode();
        	if(null!=strItemCode && strItemCode.indexOf("032")>-1){//032 蔬菜作物
        		String policyNo = prpCitemKindSchema.getPolicyNo();
        		BLPrpCitemKindAgriFacade blPrpCitemKindAgriFacade = new BLPrpCitemKindAgriFacade();
        		String sqlCondition = " PolicyNo = '"+policyNo+"' And EndDate >= sinosoft_to_date('"+strDamageDate+"','yyyy-mm-dd') And StratDate <= sinosoft_to_date('"+strDamageDate+"','yyyy-mm-dd') And Times >0 ";
        		try {
					Collection collection = blPrpCitemKindAgriFacade.findByConditions(sqlCondition);//获取茬次信息
					if(null != collection && collection.size() == 1){
						PrpCitemKindAgriDto prpCitemKindAgriDto = (PrpCitemKindAgriDto)collection.toArray()[0];
						double distributingRate = prpCitemKindAgriDto.getDistributingRate()/100;
						amount = amount * distributingRate;
					}
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        	}
        } else if ("3134".equals(strRiskCode) || "3102".equals(strRiskCode)|| ("3163".equals(strRiskCode)&& prpCitemKindSchema.getItemCode().equals("31b1"))) {  // 3134有茬次信息,需要按照当前茬次所占比例赔付
        	BLPrpCitemKindAgriFacade blPrpCitemKindAgriFacade = new BLPrpCitemKindAgriFacade();
        	String policyNo = prpCitemKindSchema.getPolicyNo();
    		String sqlCondition = " PolicyNo = '"+policyNo+"' And EndDate >= sinosoft_to_date('"+strDamageDate+"','yyyy-mm-dd') And StratDate <= sinosoft_to_date('"+strDamageDate+"','yyyy-mm-dd') And Times >0 ";
    		try {
				Collection collection = blPrpCitemKindAgriFacade.findByConditions(sqlCondition);//获取茬次信息
				if(null != collection && collection.size() == 1){
					PrpCitemKindAgriDto prpCitemKindAgriDto = (PrpCitemKindAgriDto)collection.toArray()[0];
					double distributingRate = prpCitemKindAgriDto.getDistributingRate()/100;
					amount = amount * distributingRate;
					System.err.println("做茬次比例调整---------" + distributingRate);
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
        return amount;
	}
	
	public double adjustAmountAll(PrpCitemKindSchema prpCitemKindSchema, double amount, String strDamageDate)throws Exception{
        //出险时间点精确到天,并且进行格式调整
        if(strDamageDate!=null&&strDamageDate.length()>9){
     	   strDamageDate = strDamageDate.substring(0,10);
        }
        String strRiskCode = prpCitemKindSchema.getRiskCode();
        if("3182".equals(strRiskCode)){//大棚蔬菜B款 3141，在保险标的为蔬菜的情况下，按照茬次信息把保额按比例分配。
        	String strItemCode = prpCitemKindSchema.getItemCode();

        		String policyNo = prpCitemKindSchema.getPolicyNo();
        		BLPrpCitemKindAgriFacade blPrpCitemKindAgriFacade = new BLPrpCitemKindAgriFacade();
        		String sqlCondition = " PolicyNo = '"+policyNo+"' And EndDate >= sinosoft_to_date('"+strDamageDate+"','yyyy-mm-dd') And StratDate <= sinosoft_to_date('"+strDamageDate+"','yyyy-mm-dd') And Times >0 ";
        		try {
					Collection collection = blPrpCitemKindAgriFacade.findByConditions(sqlCondition);//获取茬次信息
					if(null != collection && collection.size() == 1){
						PrpCitemKindAgriDto prpCitemKindAgriDto = (PrpCitemKindAgriDto)collection.toArray()[0];
						double distributingRate = prpCitemKindAgriDto.getDistributingRate()/100;
						amount = amount * distributingRate;
					}
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        	}
	
        return amount;
	}
	
	//农户的赔付总面积不能大于剩余面积。
	//农户的赔付金额不能大于剩余保额。
	//如果isNewestList 为true,则比较的是最新保单清单中的农户的剩余面积和剩余保额。
	//如果isNewestList 不为true,则比较的是出险时保单清单中的农户的剩余面积和剩余保额。
	private StringBuffer checkSumAreaAndSumAmount(StringBuffer errorMessage, NyxsettlelistDto planting31SettleListTotalDto, NyxpolicylistDto planting31PolicyListDto, boolean isNewestList, String enterSymbol){
		double settleSum = planting31SettleListTotalDto.getSettlesum();
		System.err.println("settleSum:"+settleSum);
		double settleArea = planting31SettleListTotalDto.getSettlearea();
		System.err.println("settleArea:"+settleArea);
		double sumAmount = planting31PolicyListDto.getSumamount();
		double insureArea = planting31PolicyListDto.getAreanumber();
		System.err.println("sumAmount:"+sumAmount);
		System.err.println("insureArea:"+insureArea);
		//System.err.println("insureArea:"+planting31PolicyListDto.getItemcode());
		if(settleArea>insureArea){
			if(isNewestList)
				errorMessage.append("农户："+planting31SettleListTotalDto.getFidcard()+"的理赔面积大于当前剩余面积。"+enterSymbol);
			else errorMessage.append("农户："+planting31SettleListTotalDto.getFidcard()+"的理赔面积大于出险时剩余面积。"+enterSymbol);
		}
		if(settleSum>sumAmount){
			if(isNewestList)
				errorMessage.append("农户："+planting31SettleListTotalDto.getFidcard()+"的理赔金额大于当前剩余保额。"+enterSymbol);
			else errorMessage.append("农户："+planting31SettleListTotalDto.getFidcard()+"的理赔金额大于出险时剩余保额。"+enterSymbol);
		}
		return errorMessage;
	}
	//根据
	private List getAllReopenSettleCodeList(String registNo, String policyNo, String compensateNo){
		List reopenSettleCodeList = new ArrayList();
		try {
			BLPrpLclaimFacade blPrpLclaimFacade = new BLPrpLclaimFacade();
			String sqlClaimCondition = " registNo like '"+registNo +"' and policyNo like '"+policyNo+"' ";
			Collection collectionPrpLclaim = blPrpLclaimFacade.findByConditions(sqlClaimCondition);
			if(null != collectionPrpLclaim && collectionPrpLclaim.size()==1){
				String claimNo = ((PrpLclaimDto)collectionPrpLclaim.toArray()[0]).getClaimNo();
				BLPrpLcompensateFacade blPrpLcompensateFacade = new BLPrpLcompensateFacade();
				String sqlCondition = " claimNo like '"+claimNo +"' and policyNo like '"+policyNo+"' ";
				if(null!=compensateNo && !"".equals(compensateNo))
					sqlCondition += " and compensateNo not like '"+compensateNo+"' ";
				Collection collectionPrpLcompensate = blPrpLcompensateFacade.findByConditions(sqlCondition);
				if(null != collectionPrpLcompensate && collectionPrpLcompensate.size()>0){
					Iterator it = collectionPrpLcompensate.iterator();
					List prpLcompensateNoList = new ArrayList();
					while(it.hasNext()){
						PrpLcompensateDto prpLcompensateDto = (PrpLcompensateDto)it.next();
						prpLcompensateNoList.add(prpLcompensateDto.getCompensateNo());
					}
					if(null!=prpLcompensateNoList && prpLcompensateNoList.size()>0){
						reopenSettleCodeList = getSettleCodeListByCompensateNo(prpLcompensateNoList);
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return reopenSettleCodeList;
	}
	//
	private List getSettleCodeListByCompensateNo(List prpLcompensateNoList){
		List reopenSettleCodeList = new ArrayList();
		if(null!=prpLcompensateNoList && prpLcompensateNoList.size()>0){
			try {
				String strAllPrpLcompensateNo = "";
				for(int i = 0;i<prpLcompensateNoList.size();i++){
					if(i==0)
						strAllPrpLcompensateNo = "'"+prpLcompensateNoList.get(i)+"'";
					else strAllPrpLcompensateNo += ",'"+prpLcompensateNoList.get(i)+"'";
				}
				String sqlCondition = " validity like '2' and compensateNo in ("+strAllPrpLcompensateNo+")";
				BLSettlemainlistFacade blSettleMainListFacade = new BLSettlemainlistFacade();
				Collection collectionSettleMainList = blSettleMainListFacade.findByConditions(sqlCondition);
				if(null!=collectionSettleMainList && collectionSettleMainList.size()>0){
					Iterator it = collectionSettleMainList.iterator();
					while(it.hasNext()){
						SettlemainlistDto settleMainListDto = (SettlemainlistDto)it.next();
						reopenSettleCodeList.add(settleMainListDto.getSettlelistcode());
					}
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return reopenSettleCodeList;
	}
	private StringBuffer checkReopenCaseSettleList(StringBuffer errorMessage, NyxsettlelistDto planting31SettleListTotalDto, List settleCodeList, String enterSymbol){
		if(null!=settleCodeList && settleCodeList.size()>0){
			String riskCode = planting31SettleListTotalDto.getRiskcode();
			String kindCode = planting31SettleListTotalDto.getKindcode();
			String fIdCard = planting31SettleListTotalDto.getFidcard();
			String itemCode = planting31SettleListTotalDto.getItemcode();
			String sqlCondition = "";
			String allSettleCode = "";
			for(int i=0;i<settleCodeList.size();i++){
				if(i==0)
					allSettleCode = "'"+settleCodeList.get(i)+"'";
				else allSettleCode += ",'"+settleCodeList.get(i)+"'";
			}
			sqlCondition = " fIdCard = '"+fIdCard+"' and riskCode = '"+riskCode+"' and kindCode = '"+kindCode+"' and itemCode = '"+itemCode+"' and validity = '1' and nodeType = 'compe' and settleListCode in ("+allSettleCode+")";
			try {
				
				BLNyxsettlelistFacade blNyxsettlelistFacade = new BLNyxsettlelistFacade();
				Collection collectionPlanting31SettleList = blNyxsettlelistFacade.findByConditions(sqlCondition);
				double settleArea = planting31SettleListTotalDto.getSettlearea();
				double settleAreaOld = 0.0;
				double settleAmount = planting31SettleListTotalDto.getSettlesum();
				double settleAmountOld = 0.0;
				if(null!= collectionPlanting31SettleList && collectionPlanting31SettleList.size()>0){
					
					NyxsettlelistDto nyxsettlelistDto = new NyxsettlelistDto();
					Iterator it = collectionPlanting31SettleList.iterator();
					while(it.hasNext()){
						nyxsettlelistDto = (NyxsettlelistDto)it.next();
						settleAreaOld += nyxsettlelistDto.getSettlearea();
						settleAmountOld += nyxsettlelistDto.getSettlesum();
					}
				}
				if(Math.abs(settleAreaOld)<Math.abs(settleArea))
					errorMessage.append("农户："+fIdCard+"的案后重开的理赔面积大于之前所有理算书面积之和。"+enterSymbol);
				if(Math.abs(settleAmountOld)<Math.abs(settleAmount))
					errorMessage.append("农户："+fIdCard+"的案后重开的理赔金额大于之前所有理算书金额之和。"+enterSymbol);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return errorMessage;
	}
	private NyxsettlelistDto getDtoFromPlanting31SettleListTotalDtoList(List planting31SettleListTotalDtoList,NyxsettlelistDto planting31SettleListDto){
		NyxsettlelistDto planting31SettleListTotalDto = new NyxsettlelistDto();
		if(null!=planting31SettleListTotalDtoList && planting31SettleListTotalDtoList.size()>0){
			String fIdCard = planting31SettleListDto.getFidcard();
			String fKindCode = planting31SettleListDto.getKindcode();
			String fItemCode = planting31SettleListDto.getItemcode();
			NyxsettlelistDto planting31SettleListTotalDtoTemp = new NyxsettlelistDto();
			for(int i=0;i<planting31SettleListTotalDtoList.size();i++){
				planting31SettleListTotalDtoTemp = (NyxsettlelistDto)planting31SettleListTotalDtoList.get(i);
				if(fIdCard.equals(planting31SettleListTotalDtoTemp.getFidcard()) && fKindCode.equals(planting31SettleListTotalDtoTemp.getKindcode()) && fItemCode.equals(planting31SettleListTotalDtoTemp.getItemcode())){
					planting31SettleListTotalDto = planting31SettleListTotalDtoTemp;
					break;
				}
			}
		}
		return planting31SettleListTotalDto;
	}
	
	private NyxsettlelistDto getDtoFromPlanting31SettleListTotalDtoList2(List planting31SettleListTotalDtoList,NyxsettlelistDto planting31SettleListDto){
		NyxsettlelistDto planting31SettleListTotalDto = new NyxsettlelistDto();
		if(null!=planting31SettleListTotalDtoList && planting31SettleListTotalDtoList.size()>0){
			String fIdCard = planting31SettleListDto.getFidcard();
			//String fKindCode = planting31SettleListDto.getKindcode();
			//String fItemCode = planting31SettleListDto.getItemcode();
			NyxsettlelistDto planting31SettleListTotalDtoTemp = new NyxsettlelistDto();
			for(int i=0;i<planting31SettleListTotalDtoList.size();i++){
				planting31SettleListTotalDtoTemp = (NyxsettlelistDto)planting31SettleListTotalDtoList.get(i);
				if(fIdCard.equals(planting31SettleListTotalDtoTemp.getFidcard())){
					planting31SettleListTotalDto = planting31SettleListTotalDtoTemp;
					break;
				}
			}
		} 
		return planting31SettleListTotalDto;
	}
	
	private StringBuffer checkKindCodeType(StringBuffer errorMessage, Map kindCodeMap){
		if(null==kindCodeMap)
			errorMessage.append("险别代码录入为空，请检查！");
		return errorMessage;
	}
	private StringBuffer checkClaimRate(StringBuffer errorMessage, Map cliamRateMap){
		if(null==cliamRateMap)
			errorMessage.append("赔付比例为空，请检查！");
		return errorMessage;
	}
	
	/** *//**
	* 提供精确的小数位截断处理。
	* @param v 需要截断的数字
	* @param scale 小数点后保留几位
	* @return 截断后的结果
	*/
	public static double roundDown(double v,int scale){
		if(scale<0){
			throw new IllegalArgumentException("The scale must be a positive integer or zero");
		}
		BigDecimal b = new BigDecimal(Double.toString(v));
		BigDecimal one = new BigDecimal("1");
		return b.divide(one,scale,BigDecimal.ROUND_DOWN).doubleValue();
	}
	//根据报案号查询出险日期。
	private String getDamageDateByRegistNo(String registNo){
		String strDamageDate = "";
		try {
			BLPrpLregistFacade blPrpLregistFacade = new BLPrpLregistFacade();
			PrpLregistDto prpLregistDto = blPrpLregistFacade.findByPrimaryKey(registNo);
			if(null==prpLregistDto)
				return null;
			else{
				SimpleDateFormat dateToStr = new SimpleDateFormat ("yyyy-MM-dd");
		        // parse date to format String
				strDamageDate = dateToStr.format(prpLregistDto.getDamageStartDate());
			}
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return strDamageDate;
	}
	//根据报案号查询出险小时。
	private String getDamageHourByRegistNo(String registNo){
		String strDamageHour = "";
		try {
			BLPrpLregistFacade blPrpLregistFacade = new BLPrpLregistFacade();
			PrpLregistDto prpLregistDto = blPrpLregistFacade.findByPrimaryKey(registNo);
			if(null==prpLregistDto)
				return null;
			else{
				strDamageHour = prpLregistDto.getDamageStartHour();
			}
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return strDamageHour;
	}
	private NyxpolicylistDto getDamageDatePlanting31PolicyListDto(NyxpolicylistDto planting31PolicyListDto, String strDamageDate, String strDamageHour, String policyNo, String kindCode, String fIdCard, String riskCode, String itemCode){
		NyxpolicylistDto planting31PolicyListTempDto = planting31PolicyListDto;
		EndorseViewHelper endorseViewHelper = new EndorseViewHelper();
		try {
			planting31PolicyListTempDto = endorseViewHelper.findForEndorPlantin3224PolicyListBefore(planting31PolicyListTempDto,riskCode,kindCode,itemCode,policyNo,strDamageDate,strDamageHour);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return planting31PolicyListTempDto;
	}
	//保存理赔清单数据到临时表中
	private boolean saveToTempTable(List planting31SettleList, String registNo, HttpServletRequest request)throws Exception{
		boolean saveResult = false;
		if(null!=planting31SettleList && planting31SettleList.size()>0){
			DBManager dbManager = new DBManager();
			String timeStamp = generateTimeStamp();
			try {
				dbManager.open("NXDADataSource");
				dbManager.beginTransaction();
				NyxsettlelistDto planting31SettleListDto = null;
				BLNyxsettlelisttempAction blNyxsettlelisttempAction = new BLNyxsettlelisttempAction();
				for(int index=0;index<planting31SettleList.size();index++){
					planting31SettleListDto = (NyxsettlelistDto)planting31SettleList.get(index);
					NyxsettlelisttempDto nyxsettlelisttempDto = planting31SettleListDto.evaluate(registNo, index, timeStamp);
					blNyxsettlelisttempAction.insert(dbManager, nyxsettlelisttempDto);				
				}
				dbManager.commitTransaction();
				saveResult = true;
				request.setAttribute("timeStamp", timeStamp);
			}catch (Exception e) {
				dbManager.rollbackTransaction();
				// TODO Auto-generated catch block
				e.printStackTrace();
			}finally{
				dbManager.close();
			}
		}
		return saveResult;
	}
	//根据报案号删除理赔清单临时表中的对应数据。
	private void deletePreviousTempData(String registNo, String timeStamp)throws Exception{
		String sqlCondition = " registCode = '"+registNo+"' and stringTimeStamp = '"+timeStamp+"' ";
		BLNyxsettlelisttempFacade blNyxsettlelisttempFacade = new BLNyxsettlelisttempFacade();
		blNyxsettlelisttempFacade.deleteByConditions(sqlCondition);
	}
	private String generateTimeStamp(){
		String timeStamp = "";
		Date currentTime = new Date();
		timeStamp=new SimpleDateFormat("yyMMddHHmmss").format(currentTime);
		return timeStamp;
	}	
//	private String checkNumber(String string){
//		String result = "";
//		^[0-9]*$
//		return result;
//	}
}