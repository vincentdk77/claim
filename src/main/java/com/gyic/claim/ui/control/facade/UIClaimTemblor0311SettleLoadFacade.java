/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gyic.claim.ui.control.facade;

import  jxl.*;

import java.io.*;

import  jxl.read.biff.BiffException;
import org.apache.struts.upload.FormFile;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.math.BigDecimal;

import javax.servlet.http.HttpServletRequest;
import org.apache.struts.action.Action;


import com.gyic.claim.bl.action.domain.BLTemblorsettlelisttempAction;
import com.gyic.claim.bl.action.domain.BLNyxsettlelisttempAction;
import com.gyic.claim.bl.action.domain.BLTemblorsettlelisttempAction;
import com.gyic.claim.bl.facade.*;
import com.gyic.claim.dto.domain.*;
import com.gyic.claim.utils.LoadForm;
import com.gyic.claim.utils.PlantingSettleExport;
import com.gyic.claim.utils.NyxSettleExport;
import com.gyic.claim.utils.TemblorSettleExport;
import com.gyic.claim.utils.Utils;
import com.sinosoft.claim.bl.facade.BLPrpCitemKindAgriFacade;
import com.sinosoft.claim.bl.facade.BLPrpLclaimFacade;
import com.sinosoft.claim.bl.facade.BLPrpLcompensateFacade;
import com.sinosoft.claim.bl.facade.BLPrpLregistFacade;
import com.sinosoft.claim.dto.custom.UserDto;
import com.sinosoft.claim.dto.domain.PrpCitemKindAgriDto;
import com.sinosoft.claim.dto.domain.PrpLclaimDto;
import com.sinosoft.claim.dto.domain.PrpLcompensateDto;
import com.sinosoft.claim.dto.domain.PrpLregistDto;
import com.sinosoft.claim.ui.control.viewHelper.EndorseViewHelper;
import com.sinosoft.prpall.blsvr.cb.BLPrpCitemKind;
import com.sinosoft.prpall.blsvr.lp.BLPrpLcompensate;
import com.sinosoft.prpall.schema.PrpCitemKindSchema;
import com.sinosoft.sysframework.common.datatype.DateTime;
import com.sinosoft.sysframework.reference.DBManager;
import com.sinosoft.utiall.blsvr.BLPrpDkind;
import com.sinosoft.utility.SysConfig;
import com.sinosoft.utility.error.UserException;

/** 
 * MyEclipse Struts
 * Creation date: 10-23-2009
 * 
 * XDoclet definition:
 * @struts.action path="/loadAction" name="loadForm" scope="request" validate="true"
 * @struts.action-forward name="importBasicInfo" path="/importBasicInfo.jsp"
 */

public class UIClaimTemblor0311SettleLoadFacade extends Action {

	static double topLimitOfGrownSeason = 1.00;
	static double lowerLimitOfGrownSeason = 0;
	static double lowerLimitOfSettleArea = 0.0;
	static double lowerLimitOfLossRate = 50;
	static double topLimitOfTotalLoss = 100;
	static double topLimitOfClaimRate = 100;
	static double lowerLimitOfClaimRate = 0;
	Utils utils=new Utils();
	public String temblorLoadAct(HttpServletRequest request,String rootPath,LoadForm loadForm)
		throws Exception {
		try {
			request.setAttribute("loadXLS", "loadXLS");
	    	request.setAttribute("insureListCode", request.getParameter("insureListCode"));
	    	request.setAttribute("settleListCode", request.getParameter("settleListCode"));
	    	request.setAttribute("policyNo", request.getParameter("policyNo"));
	    	request.setAttribute("nodeType", request.getParameter("nodeType"));
	    	request.setAttribute("registNo", request.getParameter("registNo"));
	    	request.setAttribute("claimNo", request.getParameter("claimNo"));
	    	request.setAttribute("riskCode", request.getParameter("riskCode"));
	    	request.setAttribute("classCode", request.getParameter("classCode"));
	    	request.setAttribute("registNo", request.getParameter("registNo"));
	    	request.setAttribute("editType", request.getParameter("editType"));
	    	request.setAttribute("compensateNo", request.getParameter("compensateNo"));
	    	request.setAttribute("timeStamp", request.getParameter("timeStamp"));
            utils.getPhisicaMemory("校验理赔清单并保存临时表开始-----start");
			Boolean bRes=loadSettleInfo(request,rootPath,loadForm);
			utils.getPhisicaMemory("校验理赔清单并保存临时表结束-----end");
			if (bRes){
				request.setAttribute("opType", "loadXLS");
				return ("success");
			}else{
				return ("message");
			}
		}catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
	}



	private Boolean loadSettleInfo(HttpServletRequest request,String rootPath, LoadForm loadForm)throws Exception{
		try{
			Map excelMap=loadExcelData(request,rootPath,loadForm);
			
			if ((excelMap==null) || (excelMap.size()==0))
				return false;
			
			StringBuffer errorMessage = (StringBuffer)excelMap.get("errorMessage");
			if(null!=errorMessage && !"".equals(errorMessage.toString())){
				request.setAttribute("errorMessage", errorMessage);
				return false;
			}
			else{
				List TemblorSettleList = (List)excelMap.get("temblorSettleListDtoList");
				String registNo = request.getParameter("registNo");
				String timeStamp = request.getParameter("timeStamp");
				if(null!=registNo && !"".equals(registNo)){
					deletePreviousTempData(registNo,timeStamp);//在保存之前先清空当前报案的临时表数据。
					boolean saveResult = saveToTempTable(TemblorSettleList,registNo,request);//将数据保存到临时表中,并将时间戳放到request中。
					if(!saveResult){
						request.setAttribute("errorMessage", "暂存理赔清单失败！！");
						return false;
					}
				}
			}			
		}catch (Exception e){
			e.printStackTrace();
			return false;
		}	
		return true;
	}

	private Map loadExcelData(HttpServletRequest request,String rootPath,LoadForm loadForm)throws Exception{
		try{
			Map saveMap=null;
				
			InputStream in=null;
			String savePath=rootPath;
			FormFile formFile = loadForm.getFormFile();
			String fileName=savePath+"\\"+formFile.getFileName();
				
			in =formFile.getInputStream();
			saveMap = checkAndLoadSettleExcel(request,in);
			in.close();
			return saveMap;
		}catch (Exception e){
			System.out.println(e);
			return null;
		}
	}

	private Map checkAndLoadSettleExcel(HttpServletRequest request, InputStream in)throws Exception{
		Workbook workbook=null;
		/**
		 * resultMap 包含两个参数： List plantingSettleListDtoList 理赔清单子表信息。
		 * 						 StringBuffer errorMessage 出错信息，用于页面显示。
		 */
		Map resultMap = new HashMap();
		String settleListCode = request.getParameter("settleListCode");
		String insureListCode = request.getParameter("insureListCode");
		String policyNo = request.getParameter("policyNo");
		String nodeType = request.getParameter("nodeType");
		String registNo = request.getParameter("registNo");
		String riskCode = request.getParameter("riskCode");
		String classCode = request.getParameter("classCode");
		String compensateNo = request.getParameter("compensateNo");
		String TemblorFarmerListFlag = SysConfig.getProperty("PLNATING_31_FARMER_LIST_FLAG","claim");

		double lowerLimitOfPartialLoss = 0.0;
		try{
			workbook=Workbook.getWorkbook(in);
			Sheet sheet=workbook.getSheet(0);
			
			boolean isReopen = isReopenCase(registNo, policyNo,nodeType,compensateNo);
			List reopenSettleCodeList = new ArrayList();
			if(isReopen)
				reopenSettleCodeList = getAllReopenSettleCodeList(registNo, policyNo,compensateNo);
			List TemblorSettleListDtoList = new ArrayList();
			List TemblorSettleListTotalDtoList = new ArrayList();
			List TemblorSettleListTotalDtoList2 = new ArrayList();
			List reopenFcodeList = new ArrayList();
			StringBuffer errorMessage = new StringBuffer();
			
			String sqlCondition = "";
			
			TemblorsettlelistDto TemblorsettlelistDto = new TemblorsettlelistDto();
			TemblorsettlelistDto TemblorSettleListTotalDto = new TemblorsettlelistDto();
			TemblorsettlelistDto TemblorSettleListTotalDto2 = new TemblorsettlelistDto();
			BLTemblorpolicylistFacade blTemblorpolicylistFacade = new BLTemblorpolicylistFacade();
			Collection collectionTemblorPolicyList = new ArrayList();
			Map kindCodeMap = new HashMap();
			Map claimRateMap = new HashMap();
			String enterSymbol = "<br/>";
			
			if ( null==riskCode || "".equals(riskCode)){
				errorMessage.append("险种 "+riskCode +"为空！"+enterSymbol);
				resultMap.put("errorMessage", errorMessage);
				return resultMap;
			}
			
			
			String strDamageDate = getDamageDateByRegistNo(registNo);
			String strDamageHour = getDamageHourByRegistNo(registNo);
			UserDto user = (UserDto)request.getSession().getAttribute("user");
			String opCode = user.getUserCode();
			Map fCodeMap = new HashMap();
			String sqlCon2 = "";
			TemblorpolicylistDto mainDto;
			DateTime dateTime = new DateTime(DateTime.current().toString(),DateTime.YEAR_TO_SECOND);
			if("".equals(errorMessage.toString())){//进行Excel解析。
				for (int i = 5; i < sheet.getRows(); i++){//第6行开始读入
					lowerLimitOfPartialLoss = 0;
					TemblorsettlelistDto = new TemblorsettlelistDto();
					int j=1;
					String name = sheet.getCell(j, i).getContents().trim();
					System.err.println("name"+name);
					j++;
					String cardType = sheet.getCell(j, i).getContents().trim();
					j++;
					String idCard = sheet.getCell(j, i).getContents().trim();
					j++;
					String address = sheet.getCell(j, i).getContents().trim();
					j++;
					String kindCode = sheet.getCell(j, i).getContents().trim();
					j++;
					String itemCode = sheet.getCell(j, i).getContents().trim();
					j++;
					String  damageLevel= sheet.getCell(j, i).getContents().trim();
					j++;
					String  prepay= sheet.getCell(j, i).getContents().trim();
					j++;
					String  Supplyprepay= sheet.getCell(j, i).getContents().trim();
					j++;
					String  lossAmount= sheet.getCell(j, i).getContents().trim();
					j+=2;
					String  claimRate= sheet.getCell(j, i).getContents().trim();
					j++;
					System.err.println(claimRate);
					String  lossRate= sheet.getCell(j, i).getContents().trim();
					System.err.println(lossRate);
					j+=2;
					String remark = sheet.getCell(j, i).getContents().trim();
					
					String coln = sheet.getCell(0, i).getContents().trim();
					if (("总计：").equals(coln) || ("总计").equals(coln) || ("合计：").equals(coln) || ("合计").equals(coln))
						continue;
					
					if ((("总计").equals(name)) || (("总计：").equals(name)) || (("农户代码").equals(name))|| ("合计：").equals(name) || ("合计").equals(name))
						continue;
					
					if (("").equals(name))
						continue;
					
					if ( null==kindCode || "".equals(kindCode)){
						errorMessage.append("第"+(i+1)+"行，户名"+name+"的险别 "+kindCode +"为空！"+enterSymbol);
						continue;
					}
					
					if ( null==itemCode || "".equals(itemCode)){
						errorMessage.append("第"+(i+1)+"行，户名"+name+"的标的 "+itemCode +"为空！"+enterSymbol);
						continue;
					}
					
					if(null == claimRate || "".equals(claimRate)){
						errorMessage.append("第"+(i+1)+"行，户名"+name+"的赔付比例为空！"+enterSymbol);
						continue;
					}
					
//					if(null == strfSettleArea || "".equals(strfSettleArea)){
//						errorMessage.append("第"+(i+1)+"行，农户"+idCard+"的受损面积为空！"+enterSymbol);
//						continue;
//					}
					
					if(null == lossRate || "".equals(lossRate)){
						errorMessage.append("第"+(i+1)+"行，户名"+name+"的损失率为空！"+enterSymbol);
						continue;
					}
					if(null == cardType || "".equals(cardType)){
						errorMessage.append("第"+(i+1)+"行，户名"+name+"的证件类型为空！"+enterSymbol);
						continue;
					}
					if(null == address || "".equals(address)){
						errorMessage.append("第"+(i+1)+"行，户名"+name+"的地址为空！"+enterSymbol);
						continue;
					}
					if(null == address || "".equals(address)){
						errorMessage.append("第"+(i+1)+"行，户名"+name+"的地址为空！"+enterSymbol);
						continue;
					}
					
					if(null == damageLevel || "".equals(damageLevel)){
						errorMessage.append("第"+(i+1)+"行，户名"+name+"的破坏等级为空！"+enterSymbol);
						continue;
					}
					if(null == prepay || "".equals(prepay)){
						errorMessage.append("第"+(i+1)+"行，户名"+name+"的预付金额为空！"+enterSymbol);
						continue;
					}
					
					//判断核心系统中该险种该险别该标的的保险信息。
					PrpCitemKindSchema prpCitemKindSchema = getPrpCitemKindSchema(policyNo, riskCode, kindCode, itemCode);
					if(null==prpCitemKindSchema){
						errorMessage.append("没有找到保单为"+policyNo+"，险种为"+riskCode+"，险别为"+kindCode+"，标的为"+itemCode+"的标的子险信息。"+enterSymbol);
						resultMap.put("errorMessage", errorMessage);
						continue;
					}
					//找到相应的保险信息后更新起赔点。
					if(0!=getTriggerPoint(prpCitemKindSchema))
						lowerLimitOfPartialLoss = getTriggerPoint(prpCitemKindSchema);
					
					sqlCondition = " idcard = '"+idCard+"' and address = '"+address+"' and riskCode = '"+riskCode+"' and kindCode = '"+kindCode+"' and inusreListCode = '"+insureListCode+"' and validity = '1' and itemCode ='"+itemCode+"'";
				System.err.println("sqlCondition"+sqlCondition);
					
						sqlCon2 = " idcard = '"+idCard+"' and address = '"+address+"' and riskCode = '"+riskCode+"' and kindCode = '001' and inusreListCode = '"+insureListCode+"' and validity = '1' and itemCode ='"+itemCode+"'";
						
						Collection collectionPlantingPolicyList2 = blTemblorpolicylistFacade.findByConditions(sqlCon2);
						if(collectionPlantingPolicyList2 != null &&collectionPlantingPolicyList2.size()>0)
						{
							mainDto = (TemblorpolicylistDto)(collectionPlantingPolicyList2.toArray()[0]);
						}
						else
						{
							mainDto = new TemblorpolicylistDto();
						}
						
					
					collectionTemblorPolicyList = blTemblorpolicylistFacade.findByConditions(sqlCondition);
					if(null==collectionTemblorPolicyList || collectionTemblorPolicyList.size()!=1){
						errorMessage.append("第"+(i+1)+"行，户名"+idCard+"的险种 "+riskCode+"  险别 "+kindCode +" 标的 "+itemCode+" 在保单清单中对应的记录为空或者不唯一！"+enterSymbol);
					}else{
						TemblorpolicylistDto TemblorPolicyListDto = (TemblorpolicylistDto)(collectionTemblorPolicyList.toArray()[0]);
						//从保单清单带入农户基本信息
						TemblorsettlelistDto = getBasicInfoFromPolicyList(TemblorsettlelistDto,TemblorPolicyListDto,request);
						
						boolean newTotalDto = false;
						boolean newTotalDto2 = false;
						TemblorsettlelistDto.setName(name);
						TemblorsettlelistDto.setIdcard(idCard);
						TemblorsettlelistDto.setAddress(address);
						TemblorsettlelistDto.setCardtype(cardType);
						TemblorsettlelistDto.setDamagelevel(damageLevel);
						//TemblorsettlelistDto.setPrepay(prepay);
						TemblorsettlelistDto.setRiskcode(riskCode);
						TemblorsettlelistDto.setKindcode(kindCode);
						TemblorsettlelistDto.setOpcode(opCode);
						TemblorsettlelistDto.setOptime(dateTime);
						TemblorsettlelistDto.setItemcode(itemCode);
						kindCodeMap.put(kindCode, kindCode);
						
						TemblorSettleListTotalDto = getDtoFromTemblorSettleListTotalDtoList(TemblorSettleListTotalDtoList, TemblorsettlelistDto);
						//TemblorSettleListTotalDto2 = getDtoFromTemblorSettleListTotalDtoList2(TemblorSettleListTotalDtoList2, TemblorsettlelistDto);
						if(null==TemblorSettleListTotalDto.getIdcard()||"".equals(TemblorSettleListTotalDto.getIdcard())){
							TemblorSettleListTotalDto.setName(name);
							TemblorSettleListTotalDto.setIdcard(idCard);
							TemblorSettleListTotalDto.setAddress(address);
							TemblorSettleListTotalDto.setRiskcode(riskCode);
							TemblorSettleListTotalDto.setKindcode(kindCode);
							TemblorSettleListTotalDto.setItemcode(itemCode);
							newTotalDto = true;
						}
						
//						if(null==TemblorSettleListTotalDto2.getIdcard()||"".equals(TemblorSettleListTotalDto2.getIdcard())){
//							TemblorSettleListTotalDto2.setIdcard(idCard);
//							newTotalDto2 = true;
//						}
//						if(null==TemblorSettleListTotalDto2.getAddress()||"".equals(TemblorSettleListTotalDto2.getAddress())){
//							TemblorSettleListTotalDto2.setAddress(address);
//							newTotalDto2 = true;
//						}
//						

//						//TemblorsettlelistDto.setLossrate(lossrate);
//						if(TemblorSettleListTotalDto.getSettlearea()==0)
//							TemblorSettleListTotalDto.setSettlearea(settleArea);
//						else TemblorSettleListTotalDto.setSettlearea(TemblorSettleListTotalDto.getSettlearea()+settleArea);
//						TemblorSettleListTotalDto2.setSettlearea(0);
						//损失率必须在规定的损失范围内。
						double lossrate = transformStringToDouble(lossRate);
						lossrate = TemblorSettleExport.round(lossrate, 2);
						System.err.println(TemblorSettleExport.round(lossrate, 2));
						if(Math.abs(lossrate)<lowerLimitOfLossRate){
							errorMessage.append("第"+(i+1)+"行，客户"+idCard+"的损失率小于"+lowerLimitOfLossRate+"%"+enterSymbol);
							continue;
						}
					else{
						if(lossrate<lowerLimitOfLossRate){
							errorMessage.append("第"+(i+1)+"行，客户"+idCard+"的损失率小于"+lowerLimitOfLossRate+"%"+enterSymbol);
							continue;
						}
						TemblorsettlelistDto.setLossrate(lossrate);
						
						double supplyprepay = transformStringToDouble(Supplyprepay);
						supplyprepay = TemblorSettleExport.round(supplyprepay, 2);
						TemblorsettlelistDto.setSupplyprepay(supplyprepay); 
						//赔付比例必须在规定的范围内。
						double claimrate = transformStringToDouble(claimRate);
						claimrate = TemblorSettleExport.round(claimrate, 2);
//						claimRate = claimRate;
						if(topLimitOfClaimRate<claimrate || lowerLimitOfClaimRate>=claimrate){
							errorMessage.append("第"+(i+1)+"行，客户"+idCard+"的赔付比率必须在"+lowerLimitOfClaimRate+"到"+topLimitOfClaimRate+"之间！"+enterSymbol);
							continue;
						}
						claimRateMap.put(claimrate, claimrate);
						TemblorsettlelistDto.setClaimrate(claimrate);
						
						//计算赔款金额
						//TemblorPolicyListDto 应该替换成为出险时清单数据。
						double settleSum = calculateSettleSum(TemblorPolicyListDto,lossrate/100,claimrate/100,strDamageDate);
						if(settleSum == 0){
							errorMessage.append("第"+(i+1)+"行，客户"+idCard+"的赔款为0！"+enterSymbol);
							continue;
						}
						settleSum = TemblorSettleExport.round(settleSum, 2);
						TemblorsettlelistDto.setSettlesum(settleSum);
						if(TemblorSettleListTotalDto.getSettlesum()==0)
							TemblorSettleListTotalDto.setSettlesum(settleSum);
						else TemblorSettleListTotalDto.setSettlesum(TemblorSettleListTotalDto.getSettlesum()+settleSum);
						
//						if(TemblorSettleListTotalDto2.getSettlesum()==0)
//							TemblorSettleListTotalDto2.setSettlesum(settleSum);
//						else TemblorSettleListTotalDto2.setSettlesum(TemblorSettleListTotalDto2.getSettlesum()+settleSum);
						
						//存入电话号码和备注。
//						TemblorsettlelistDto.setPhone(fPhone);
						TemblorsettlelistDto.setRemark(remark);
						
						TemblorSettleListDtoList.add(TemblorsettlelistDto);
						if(newTotalDto)
							TemblorSettleListTotalDtoList.add(TemblorSettleListTotalDto);
//						if(newTotalDto2)
//							TemblorSettleListTotalDtoList2.add(TemblorSettleListTotalDto2);
//						
						

						//与保单最新清单进行总亩数和总金额的校验。
						checkSumAreaAndSumAmount(errorMessage,TemblorSettleListTotalDto,TemblorPolicyListDto,true,enterSymbol);
//						checkSumAreaAndSumAmount(errorMessage,TemblorSettleListTotalDto2,mainDto,true,enterSymbol);
						//与出险时清单进行总亩数和总金额的校验。
						TemblorpolicylistDto damageDateTemblorPolicyListDto = getDamageDateTemblorPolicyListDto(TemblorPolicyListDto, strDamageDate, strDamageHour, policyNo, kindCode, idCard, riskCode, itemCode);
//						TemblorpolicylistDto damageDateTemblorPolicyListDto2 = getDamageDateTemblorPolicyListDto(mainDto, strDamageDate, strDamageHour, policyNo, fKindCode, idCard, riskCode, fItemCode);
						checkSumAreaAndSumAmount(errorMessage,TemblorSettleListTotalDto,damageDateTemblorPolicyListDto,false,enterSymbol);
//						checkSumAreaAndSumAmount(errorMessage,TemblorSettleListTotalDto2,damageDateTemblorPolicyListDto2,false,enterSymbol);
						
						//对于案后重开的案件，如果理赔面积小于0，增加与本案之前的理赔清单的总金额和面积校验。
//						if(isReopen){
//							if(settleArea<0){
//								errorMessage = checkReopenCaseSettleList(errorMessage,TemblorSettleListTotalDto,reopenSettleCodeList,enterSymbol);
//							}
						}if(!fCodeMap.containsKey(""+idCard+kindCode+itemCode+address+claimRate+lossRate)){
							fCodeMap.put(""+idCard+kindCode+itemCode+address+claimRate+lossRate, ""+idCard+kindCode+itemCode+address+claimRate+lossRate);
						}else
							errorMessage.append("客户"+idCard+"的险种 "+riskCode+"  险别 "+kindCode +" 标的 "+itemCode+" 地址 "+address+" 赔付比例 "+ claimRate +" 损失率 "+ lossRate+ " 的理赔记录不唯一！"+enterSymbol);
					}
					
				}
				errorMessage = checkKindCodeType(errorMessage,kindCodeMap);
				errorMessage = checkClaimRate(errorMessage,claimRateMap);
			}
			resultMap.put("temblorSettleListDtoList", TemblorSettleListDtoList);
			resultMap.put("errorMessage", errorMessage);
			workbook.close();
		}catch (BiffException e){
			e.printStackTrace();
		//	workbook.close();
			return null;
		}catch (IOException e){
			e.printStackTrace();
			return null;
		}catch (Exception e){
			e.printStackTrace();
			return null;
		}finally{
			if (workbook!=null)
				workbook.close();
		}
		return resultMap;
	}

	public static String trimAllSpace(String str) {
		//return str == null ? str : str.replaceAll("^[\\s　]*|[\\s　]*$", "");  
		return str == null ? str : str.replaceAll("^[\\s　]*|，。？：；‘’！“”―……、|[\\s　]*$", "");  
	}
	private String getKindCodeByCName(String cName){
		String kindCode = "";
		String sqlCondition = " kindCName like '"+cName+"' ";
		BLPrpDkind blPrpDkind = new BLPrpDkind();
		try {
			blPrpDkind.query(sqlCondition);
			if(1==blPrpDkind.getSize())
				kindCode = blPrpDkind.getArr(0).getKindCode();
			else throw new Exception("无法找到 "+cName+" 对应的险别代码，请检查！");
		} catch (UserException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return kindCode;
	}
	//根据节点类型判断是否是理算环节，非理算环节不涉及到案后重开。如果是理算环节，再根据立案号和保单号查询理算书表，如果已经存在理算书，则表明现在是在做案后重开。
	private boolean isReopenCase(String registNo, String policyNo, String nodeType, String compensateNo){
		boolean isReopen = false;
		if(UIClaimGetSettleListFacade.nodeList[2].equals(nodeType)){
			BLPrpLcompensate blPrpLcompensate = new BLPrpLcompensate();
			BLPrpLclaimFacade blPrpLclaimFacade = new BLPrpLclaimFacade();
			String sqlClaimCondition = " registNo like '"+registNo +"' and policyNo like '"+policyNo+"' ";
			try {
				Collection collectionPrpLclaim = blPrpLclaimFacade.findByConditions(sqlClaimCondition);
				if(null != collectionPrpLclaim && collectionPrpLclaim.size()==1){
					String claimNo = ((PrpLclaimDto)collectionPrpLclaim.toArray()[0]).getClaimNo();
					BLPrpLcompensateFacade blPrpLcompensateFacade = new BLPrpLcompensateFacade();
					String sqlCondition = " claimNo like '"+claimNo +"' and policyNo like '"+policyNo+"' ";
					if(null!=compensateNo && !"".equals(compensateNo))
						sqlCondition += " and compensateNo not like '"+compensateNo+"' ";
					blPrpLcompensate.query(sqlCondition);
					if( blPrpLcompensate.getSize()>0)
						isReopen = true;
				}
			} catch (UserException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return isReopen;
	}
	//将字符串型数据转化证浮点型数据。
	private double transformStringToDouble(String stringValue){
		double doubleValue = 0.0;
		if(null!=stringValue && !"".equals(stringValue)){
			stringValue = trimAllSpace(stringValue);
			doubleValue = Double.parseDouble(stringValue);
		}
		return doubleValue;
	}
	//将部分不能从excel导入的基本信息，从保单清单数据中转储到理赔清单中。
	private TemblorsettlelistDto getBasicInfoFromPolicyList(TemblorsettlelistDto TemblorSettleListDto, TemblorpolicylistDto TemblorPolicyListDto,HttpServletRequest httpServletRequest){
		TemblorSettleListDto.setName(TemblorPolicyListDto.getName());
		TemblorSettleListDto.setCardtype(TemblorPolicyListDto.getCardtype());
		TemblorSettleListDto.setIdcard(TemblorPolicyListDto.getIdcard());
		TemblorSettleListDto.setAddress(TemblorPolicyListDto.getAddress());
		TemblorSettleListDto.setKindcode(TemblorPolicyListDto.getKindcode());
		TemblorSettleListDto.setItemcode(TemblorPolicyListDto.getItemcode());
		
		TemblorSettleListDto.setInusrelistcode(TemblorPolicyListDto.getInusrelistcode());
		TemblorSettleListDto.setClasscode(TemblorPolicyListDto.getClasscode());
		//TemblorSettleListDto.setdamagelevel(TemblorPolicyListDto.getDamagelevel());
		TemblorSettleListDto.setSuminsured(TemblorPolicyListDto.getSumamount());
                                                                         
		TemblorSettleListDto.setValidity("1");
		TemblorSettleListDto.setNodetype(httpServletRequest.getParameter("nodeType"));
		return TemblorSettleListDto;
	}
	//根据保单号，险种代码，险别代码获取一条标的子险信息。可为主险，也可为附加险。
	public PrpCitemKindSchema getPrpCitemKindSchema(String policyNo, String riskCode, String kindCode, String itemCode)throws Exception{
		PrpCitemKindSchema prpCitemKindSchema = null;
		try {
			if(null!=riskCode && !"".equals(riskCode) && null!=kindCode && !"".equals(kindCode)&& null!=itemCode && !"".equals(itemCode)){
				BLPrpCitemKind blPrpCitemKind = new BLPrpCitemKind();
				String sqlCondition = "policyNo = '"+policyNo+"' AND riskCode = '"+riskCode+"' AND kindCode = '"+kindCode+"' AND itemCode = '"+itemCode+"'";
				blPrpCitemKind.query(sqlCondition);
				if(null!=blPrpCitemKind && blPrpCitemKind.getSize()==1){
					PrpCitemKindSchema prpCitemKindSchemaTemp = blPrpCitemKind.getArr(0);
					prpCitemKindSchema = prpCitemKindSchemaTemp;
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return prpCitemKindSchema;
	}
	//根据规则计算出赔偿金额。
	private double calculateSettleSum(TemblorpolicylistDto temblorpolicylistDto,  double lossRate, double claimRate, String strDamageDate)throws Exception{
		double settleSum = 0.0;
//		double lowerLimitOfPartialLoss = getTriggerPoint(prpCitemKindSchema)/100;//起赔点
//		double topLimitOfPartialLoss = getTotalLossRatePoint(prpCitemKindSchema)/100;//全损起点
		//double deductibleRate = getDeductibleRate(prpCitemKindSchema)/100;//绝对免赔率
		//double deductible = getDeductible(prpCitemKindSchema);//绝对免赔额
		//double franchiseDeductibleRate = getFranchiseDeductibleRate(prpCitemKindSchema);//相对免赔率
		double franchiseDeductble = 0.0;//相对免赔额
		
		
		double amount = temblorpolicylistDto.getSumamount();//保额
		//amount = adjustAmount(prpCitemKindSchema, amount, strDamageDate);//部分险种标的需要对保额进行校正。
		
//		if(lowerLimitOfPartialLoss<=lossRate && lossRate<topLimitOfPartialLoss){
//		//对于部分损失的（如30%<=损失率<80%）的按部分损失的公式计算：保额*赔付比例*损失率*(1-绝对免赔率)-绝对免赔额
//			settleSum = amount*claimRate*lossRate*(1-deductibleRate)-deductible;
//		}
//		else if(lossRate>=topLimitOfPartialLoss)
		//对于全损（如损失率>=80%）的按全损公式计算：保额*赔付比例*(1-绝对免赔率)
			settleSum = amount*claimRate*lossRate;
			System.err.println("settleSum"+settleSum);

//		if(Math.abs(settleSum) < Math.abs(franchiseDeductble))//对赔偿金额和相对免赔额做比较，低于相对免赔额，则不赔。
//			settleSum = 0;
		return settleSum;
	}
	//获取起赔点
	public double getTriggerPoint(PrpCitemKindSchema prpCitemKindSchema){
		double triggerPoint = 0;
		String strRiskCode = prpCitemKindSchema.getRiskCode();
		String strTriggerPoint = prpCitemKindSchema.getTriggerPoint();
		if(null!=strRiskCode && !"".equals(strRiskCode) && null!=prpCitemKindSchema && !"".equals(prpCitemKindSchema)){
			if("3224".equals(strRiskCode)){
				triggerPoint = transformStringToDouble(strTriggerPoint);
			}
		}
		return triggerPoint;
	}
	//获取相对免赔额
	public double getFranchiseDeductible(PrpCitemKindSchema prpCitemKindSchema){
		double franchiseDeductible = 0;
		String strRiskCode = prpCitemKindSchema.getRiskCode();
		if(null!=strRiskCode && !"".equals(strRiskCode) && null!=prpCitemKindSchema && !"".equals(prpCitemKindSchema)){
			if("3224".equals(strRiskCode)){
				//franchiseDeductible = transformStringToDouble(prpCitemKindSchema.getDeductibleRate());
			}
		}
		return franchiseDeductible;
	}
	//获取相对免赔率
	public double getFranchiseDeductibleRate(PrpCitemKindSchema prpCitemKindSchema){
		double franchiseDeductibleRate = 0;
		String strRiskCode = prpCitemKindSchema.getRiskCode();
		if(null!=strRiskCode && !"".equals(strRiskCode) && null!=prpCitemKindSchema && !"".equals(prpCitemKindSchema)){
			if("3141".equals(strRiskCode)){
			}
		}
		return franchiseDeductibleRate;
	}
	//获取绝对免赔额
	public double getDeductible(PrpCitemKindSchema prpCitemKindSchema){
		double deductibleRelative = 0;
		String strRiskCode = prpCitemKindSchema.getRiskCode();
		if(null!=strRiskCode && !"".equals(strRiskCode) && null!=prpCitemKindSchema && !"".equals(prpCitemKindSchema)){
			if("3224".equals(strRiskCode)){
			}
		}
		return deductibleRelative;
	}
	//获取绝对免赔率
	public double getDeductibleRate(PrpCitemKindSchema prpCitemKindSchema){
		double deductibleRateRelative = 0;
		String strRiskCode = prpCitemKindSchema.getRiskCode();
		if(null!=strRiskCode && !"".equals(strRiskCode) && null!=prpCitemKindSchema && !"".equals(prpCitemKindSchema)){
			if("3224".equals(strRiskCode)){
				String strKindcode = prpCitemKindSchema.getKindCode();
				if(null!= strKindcode && "001".equals(strKindcode))
				{
					deductibleRateRelative = 30;
				}
				if(null!= strKindcode && "002".equals(strKindcode))
				{
					deductibleRateRelative = 20;
				}
				if(null!= strKindcode && "003".equals(strKindcode))
				{
					deductibleRateRelative = 30;
				}
					
			}
		}
		return deductibleRateRelative;
	}
	//获取全损损失率起点
	public double getTotalLossRatePoint(PrpCitemKindSchema prpCitemKindSchema){
		double totalLossRatePoint = 100;
		String strRiskCode = prpCitemKindSchema.getRiskCode();
		if(null!=strRiskCode && !"".equals(strRiskCode) && null!=prpCitemKindSchema && !"".equals(prpCitemKindSchema) && null != prpCitemKindSchema.getTotalLossRatio() && !"".equals(prpCitemKindSchema.getTotalLossRatio())){
			totalLossRatePoint = transformStringToDouble(prpCitemKindSchema.getTotalLossRatio());
		}
		if(0==totalLossRatePoint)
			totalLossRatePoint = 100;
		return totalLossRatePoint;
	}
	
	public double adjustAmount(PrpCitemKindSchema prpCitemKindSchema, double amount, String strDamageDate)throws Exception{
        //出险时间点精确到天,并且进行格式调整
        if(strDamageDate!=null&&strDamageDate.length()>9){
     	   strDamageDate = strDamageDate.substring(0,10);
        }
        String strRiskCode = prpCitemKindSchema.getRiskCode();
        if("3141".equals(strRiskCode)||"3140".equals(strRiskCode)){//大棚蔬菜B款 3141，在保险标的为蔬菜的情况下，按照茬次信息把保额按比例分配。
        	String strItemCode = prpCitemKindSchema.getItemCode();
        	if(null!=strItemCode && (strItemCode.indexOf("032")>-1 || strItemCode.equals("6330"))){//032 蔬菜作物
        		String policyNo = prpCitemKindSchema.getPolicyNo();
        		BLPrpCitemKindAgriFacade blPrpCitemKindAgriFacade = new BLPrpCitemKindAgriFacade();
        		String sqlCondition = " PolicyNo = '"+policyNo+"' And EndDate >= sinosoft_to_date('"+strDamageDate+"','yyyy-mm-dd') And StratDate <= sinosoft_to_date('"+strDamageDate+"','yyyy-mm-dd') And Times >0 ";
        		try {
					Collection collection = blPrpCitemKindAgriFacade.findByConditions(sqlCondition);//获取茬次信息
					if(null != collection && collection.size() == 1){
						PrpCitemKindAgriDto prpCitemKindAgriDto = (PrpCitemKindAgriDto)collection.toArray()[0];
						double distributingRate = prpCitemKindAgriDto.getDistributingRate()/100;
						amount = amount * distributingRate;
					}
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        	}
        }else if("3147".equals(strRiskCode)){//大棚蔬菜A款 3147，在保险标的为蔬菜的情况下，按照茬次信息把保额按比例分配。
        	String strItemCode = prpCitemKindSchema.getItemCode();
        	if(null!=strItemCode && strItemCode.indexOf("032")>-1){//032 蔬菜作物
        		String policyNo = prpCitemKindSchema.getPolicyNo();
        		BLPrpCitemKindAgriFacade blPrpCitemKindAgriFacade = new BLPrpCitemKindAgriFacade();
        		String sqlCondition = " PolicyNo = '"+policyNo+"' And EndDate >= sinosoft_to_date('"+strDamageDate+"','yyyy-mm-dd') And StratDate <= sinosoft_to_date('"+strDamageDate+"','yyyy-mm-dd') And Times >0 ";
        		try {
					Collection collection = blPrpCitemKindAgriFacade.findByConditions(sqlCondition);//获取茬次信息
					if(null != collection && collection.size() == 1){
						PrpCitemKindAgriDto prpCitemKindAgriDto = (PrpCitemKindAgriDto)collection.toArray()[0];
						double distributingRate = prpCitemKindAgriDto.getDistributingRate()/100;
						amount = amount * distributingRate;
					}
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        	}
        }
        return amount;
	}
	
	//农户的赔付总面积不能大于剩余面积。
	//农户的赔付金额不能大于剩余保额。
	//如果isNewestList 为true,则比较的是最新保单清单中的农户的剩余面积和剩余保额。
	//如果isNewestList 不为true,则比较的是出险时保单清单中的农户的剩余面积和剩余保额。
	private StringBuffer checkSumAreaAndSumAmount(StringBuffer errorMessage, TemblorsettlelistDto TemblorSettleListTotalDto, TemblorpolicylistDto TemblorPolicyListDto, boolean isNewestList, String enterSymbol){
		double settleSum = TemblorSettleListTotalDto.getSettlesum();
		System.err.println("settleSum:"+settleSum);
//		double settleArea = TemblorSettleListTotalDto.getSettlearea();
//		System.err.println("settleArea:"+settleArea);
		double sumAmount = TemblorPolicyListDto.getSumamount();
//		double insureArea = TemblorPolicyListDto.getAreanumber();
		System.err.println("sumAmount:"+sumAmount);
//		System.err.println("insureArea:"+insureArea);
//		if(settleArea>insureArea){
//			if(isNewestList)
//				errorMessage.append("农户："+TemblorSettleListTotalDto.getidCard()+"的理赔面积大于当前剩余面积。"+enterSymbol);
//			else errorMessage.append("农户："+TemblorSettleListTotalDto.getidCard()+"的理赔面积大于出险时剩余面积。"+enterSymbol);
//		}
		if(settleSum>sumAmount){
			if(isNewestList)
				errorMessage.append("客户："+TemblorSettleListTotalDto.getName()+"的理赔金额大于当前剩余保额。"+enterSymbol);
			else errorMessage.append("客户："+TemblorSettleListTotalDto.getName()+"的理赔金额大于出险时剩余保额。"+enterSymbol);
		}
		return errorMessage;
	}
	//根据
	private List getAllReopenSettleCodeList(String registNo, String policyNo, String compensateNo){
		List reopenSettleCodeList = new ArrayList();
		try {
			BLPrpLclaimFacade blPrpLclaimFacade = new BLPrpLclaimFacade();
			String sqlClaimCondition = " registNo like '"+registNo +"' and policyNo like '"+policyNo+"' ";
			Collection collectionPrpLclaim = blPrpLclaimFacade.findByConditions(sqlClaimCondition);
			if(null != collectionPrpLclaim && collectionPrpLclaim.size()==1){
				String claimNo = ((PrpLclaimDto)collectionPrpLclaim.toArray()[0]).getClaimNo();
				BLPrpLcompensateFacade blPrpLcompensateFacade = new BLPrpLcompensateFacade();
				String sqlCondition = " claimNo like '"+claimNo +"' and policyNo like '"+policyNo+"' ";
				if(null!=compensateNo && !"".equals(compensateNo))
					sqlCondition += " and compensateNo not like '"+compensateNo+"' ";
				Collection collectionPrpLcompensate = blPrpLcompensateFacade.findByConditions(sqlCondition);
				if(null != collectionPrpLcompensate && collectionPrpLcompensate.size()>0){
					Iterator it = collectionPrpLcompensate.iterator();
					List prpLcompensateNoList = new ArrayList();
					while(it.hasNext()){
						PrpLcompensateDto prpLcompensateDto = (PrpLcompensateDto)it.next();
						prpLcompensateNoList.add(prpLcompensateDto.getCompensateNo());
					}
					if(null!=prpLcompensateNoList && prpLcompensateNoList.size()>0){
						reopenSettleCodeList = getSettleCodeListByCompensateNo(prpLcompensateNoList);
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return reopenSettleCodeList;
	}
	//
	private List getSettleCodeListByCompensateNo(List prpLcompensateNoList){
		List reopenSettleCodeList = new ArrayList();
		if(null!=prpLcompensateNoList && prpLcompensateNoList.size()>0){
			try {
				String strAllPrpLcompensateNo = "";
				for(int i = 0;i<prpLcompensateNoList.size();i++){
					if(i==0)
						strAllPrpLcompensateNo = "'"+prpLcompensateNoList.get(i)+"'";
					else strAllPrpLcompensateNo += ",'"+prpLcompensateNoList.get(i)+"'";
				}
				String sqlCondition = " validity like '2' and compensateNo in ("+strAllPrpLcompensateNo+")";
				BLSettlemainlistFacade blSettleMainListFacade = new BLSettlemainlistFacade();
				Collection collectionSettleMainList = blSettleMainListFacade.findByConditions(sqlCondition);
				if(null!=collectionSettleMainList && collectionSettleMainList.size()>0){
					Iterator it = collectionSettleMainList.iterator();
					while(it.hasNext()){
						SettlemainlistDto settleMainListDto = (SettlemainlistDto)it.next();
						reopenSettleCodeList.add(settleMainListDto.getSettlelistcode());
					}
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return reopenSettleCodeList;
	}
	private StringBuffer checkReopenCaseSettleList(StringBuffer errorMessage, TemblorsettlelistDto TemblorSettleListTotalDto, List settleCodeList, String enterSymbol){
		if(null!=settleCodeList && settleCodeList.size()>0){
			String riskCode = TemblorSettleListTotalDto.getRiskcode();
			String kindCode = TemblorSettleListTotalDto.getKindcode();
			String idCard = TemblorSettleListTotalDto.getIdcard();
			String itemCode = TemblorSettleListTotalDto.getItemcode();
			String address = TemblorSettleListTotalDto.getAddress();
			String sqlCondition = "";
			String allSettleCode = "";
			for(int i=0;i<settleCodeList.size();i++){
				if(i==0)
					allSettleCode = "'"+settleCodeList.get(i)+"'";
				else allSettleCode += ",'"+settleCodeList.get(i)+"'";
			}
			sqlCondition = " idCard = '"+idCard+"' and Address = '"+address+"' and riskCode = '"+riskCode+"' and kindCode = '"+kindCode+"' and itemCode = '"+itemCode+"' and validity = '1' and nodeType = 'compe' and settleListCode in ("+allSettleCode+")";
			try {
				
				BLTemblorsettlelistFacade blTemblorsettlelistFacade = new BLTemblorsettlelistFacade();
				Collection collectionTemblorSettleList = blTemblorsettlelistFacade.findByConditions(sqlCondition);
//				double settleArea = TemblorSettleListTotalDto.getSettlearea();
//				double settleAreaOld = 0.0;
				double settleAmount = TemblorSettleListTotalDto.getSettlesum();
				double settleAmountOld = 0.0;
				if(null!= collectionTemblorSettleList && collectionTemblorSettleList.size()>0){
					
					TemblorsettlelistDto TemblorsettlelistDto = new TemblorsettlelistDto();
					Iterator it = collectionTemblorSettleList.iterator();
					while(it.hasNext()){
						TemblorsettlelistDto = (TemblorsettlelistDto)it.next();
						//settleAreaOld += TemblorsettlelistDto.getSettlearea();
						settleAmountOld += TemblorsettlelistDto.getSettlesum();
					}
				}

				if(Math.abs(settleAmountOld)<Math.abs(settleAmount))
					errorMessage.append("农户："+idCard+"的案后重开的理赔金额大于之前所有理算书金额之和。"+enterSymbol);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return errorMessage;
	}
	private TemblorsettlelistDto getDtoFromTemblorSettleListTotalDtoList(List TemblorSettleListTotalDtoList,TemblorsettlelistDto TemblorSettleListDto){
		TemblorsettlelistDto TemblorSettleListTotalDto = new TemblorsettlelistDto();
		if(null!=TemblorSettleListTotalDtoList && TemblorSettleListTotalDtoList.size()>0){
			String idCard = TemblorSettleListDto.getIdcard();
			String fKindCode = TemblorSettleListDto.getKindcode();
			String fItemCode = TemblorSettleListDto.getItemcode();
			String fAddress = TemblorSettleListDto.getAddress();
			System.err.println(idCard);
			System.err.println(fKindCode);
			System.err.println(fItemCode);
			System.err.println(fAddress);
			TemblorsettlelistDto TemblorSettleListTotalDtoTemp = new TemblorsettlelistDto();
			for(int i=0;i<TemblorSettleListTotalDtoList.size();i++){
				TemblorSettleListTotalDtoTemp = (TemblorsettlelistDto)TemblorSettleListTotalDtoList.get(i);
				if(idCard.equals(TemblorSettleListTotalDtoTemp.getIdcard()) && fAddress.equals(TemblorSettleListTotalDtoTemp.getAddress())&& fKindCode.equals(TemblorSettleListTotalDtoTemp.getKindcode()) && fItemCode.equals(TemblorSettleListTotalDtoTemp.getItemcode())){
					TemblorSettleListTotalDto = TemblorSettleListTotalDtoTemp;
					break;
				}
			}
		}
		return TemblorSettleListTotalDto;
	}
	
	private TemblorsettlelistDto getDtoFromTemblorSettleListTotalDtoList2(List TemblorSettleListTotalDtoList,TemblorsettlelistDto TemblorSettleListDto){
		TemblorsettlelistDto TemblorSettleListTotalDto = new TemblorsettlelistDto();
		if(null!=TemblorSettleListTotalDtoList && TemblorSettleListTotalDtoList.size()>0){
			String idCard = TemblorSettleListDto.getIdcard();
			String fAddress = TemblorSettleListDto.getAddress();
			//String fKindCode = TemblorSettleListDto.getKindcode();
			//String fItemCode = TemblorSettleListDto.getItemcode();
			TemblorsettlelistDto TemblorSettleListTotalDtoTemp = new TemblorsettlelistDto();
			for(int i=0;i<TemblorSettleListTotalDtoList.size();i++){
				TemblorSettleListTotalDtoTemp = (TemblorsettlelistDto)TemblorSettleListTotalDtoList.get(i);
				if(idCard.equals(TemblorSettleListTotalDtoTemp.getIdcard())&& fAddress.equals(TemblorSettleListTotalDtoTemp.getAddress())){
					TemblorSettleListTotalDto = TemblorSettleListTotalDtoTemp;
					break;
				}
			}
		} 
		return TemblorSettleListTotalDto;
	}
	
	private StringBuffer checkKindCodeType(StringBuffer errorMessage, Map kindCodeMap){
		if(null==kindCodeMap)
			errorMessage.append("险别代码录入为空，请检查！");
		return errorMessage;
	}
	private StringBuffer checkClaimRate(StringBuffer errorMessage, Map cliamRateMap){
		if(null==cliamRateMap)
			errorMessage.append("赔付比例为空，请检查！");
		return errorMessage;
	}
	
	/** *//**
	* 提供精确的小数位截断处理。
	* @param v 需要截断的数字
	* @param scale 小数点后保留几位
	* @return 截断后的结果
	*/
	public static double roundDown(double v,int scale){
		if(scale<0){
			throw new IllegalArgumentException("The scale must be a positive integer or zero");
		}
		BigDecimal b = new BigDecimal(Double.toString(v));
		BigDecimal one = new BigDecimal("1");
		return b.divide(one,scale,BigDecimal.ROUND_DOWN).doubleValue();
	}
	//根据报案号查询出险日期。
	private String getDamageDateByRegistNo(String registNo){
		String strDamageDate = "";
		try {
			BLPrpLregistFacade blPrpLregistFacade = new BLPrpLregistFacade();
			PrpLregistDto prpLregistDto = blPrpLregistFacade.findByPrimaryKey(registNo);
			if(null==prpLregistDto)
				return null;
			else{
				SimpleDateFormat dateToStr = new SimpleDateFormat ("yyyy-MM-dd");
		        // parse date to format String
				strDamageDate = dateToStr.format(prpLregistDto.getDamageStartDate());
			}
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return strDamageDate;
	}
	//根据报案号查询出险小时。
	private String getDamageHourByRegistNo(String registNo){
		String strDamageHour = "";
		try {
			BLPrpLregistFacade blPrpLregistFacade = new BLPrpLregistFacade();
			PrpLregistDto prpLregistDto = blPrpLregistFacade.findByPrimaryKey(registNo);
			if(null==prpLregistDto)
				return null;
			else{
				strDamageHour = prpLregistDto.getDamageStartHour();
			}
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return strDamageHour;
	}
	private TemblorpolicylistDto getDamageDateTemblorPolicyListDto(TemblorpolicylistDto TemblorPolicyListDto, String strDamageDate, String strDamageHour, String policyNo, String kindCode, String idCard, String riskCode, String itemCode){
		TemblorpolicylistDto TemblorPolicyListTempDto = TemblorPolicyListDto;
		EndorseViewHelper endorseViewHelper = new EndorseViewHelper();
		try {
			TemblorPolicyListTempDto = endorseViewHelper.findForEndorTemblor0311PolicyListBefore(TemblorPolicyListTempDto,riskCode,kindCode,itemCode,policyNo,strDamageDate,strDamageHour);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return TemblorPolicyListTempDto;
	}
	//保存理赔清单数据到临时表中
	private boolean saveToTempTable(List TemblorSettleList, String registNo, HttpServletRequest request)throws Exception{
		boolean saveResult = false;
		if(null!=TemblorSettleList && TemblorSettleList.size()>0){
			DBManager dbManager = new DBManager();
			String timeStamp = generateTimeStamp();
			try {
				dbManager.open("NXDADataSource");
				dbManager.beginTransaction();
				TemblorsettlelistDto temblorSettleListDto = null;
				BLTemblorsettlelisttempAction blTemblorsettlelisttempAction = new BLTemblorsettlelisttempAction();
				for(int index=0;index<TemblorSettleList.size();index++){
					temblorSettleListDto = (TemblorsettlelistDto)TemblorSettleList.get(index);
					TemblorsettlelisttempDto temblorsettlelisttempDto = temblorSettleListDto.evaluate(registNo, index, timeStamp);
					blTemblorsettlelisttempAction.insert(dbManager, temblorsettlelisttempDto);				
				}
				dbManager.commitTransaction();
				saveResult = true;
				request.setAttribute("timeStamp", timeStamp);
			}catch (Exception e) {
				dbManager.rollbackTransaction();
				// TODO Auto-generated catch block
				e.printStackTrace();
			}finally{
				dbManager.close();
			}
		}
		return saveResult;
	}
	//根据报案号删除理赔清单临时表中的对应数据。
	private void deletePreviousTempData(String registNo, String timeStamp)throws Exception{
		String sqlCondition = " registCode = '"+registNo+"' and stringTimeStamp = '"+timeStamp+"' ";
		BLTemblorsettlelisttempFacade blTemblorsettlelisttempFacade = new BLTemblorsettlelisttempFacade();
		blTemblorsettlelisttempFacade.deleteByConditions(sqlCondition);
	}
	private String generateTimeStamp(){
		String timeStamp = "";
		Date currentTime = new Date();
		timeStamp=new SimpleDateFormat("yyMMddHHmmss").format(currentTime);
		return timeStamp;
	}	
//	private String checkNumber(String string){
//		String result = "";
//		^[0-9]*$
//		return result;
//	}
}